{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FunfunzMC Documentation For the source code you can visit Github funfunzmc . Overview FunfunzMC was created due the lack of a functional back-office and API generator in the NodeJS community. The goal is to generate a complete CMS/back-office/data manager application Current features: CRUD operations Table filters MySQL and MongoDB parser and configurations generator Friendly name generator for table names and fields Role support Configurable Hooks on all the requests to change any data on the backend side GraphQL generator Installation Global installation npm install -g funfunzmc Project installation npm install funfunzmc CLI funfunzmc - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Home"},{"location":"#funfunzmc-documentation","text":"For the source code you can visit Github funfunzmc .","title":"FunfunzMC Documentation"},{"location":"#overview","text":"FunfunzMC was created due the lack of a functional back-office and API generator in the NodeJS community. The goal is to generate a complete CMS/back-office/data manager application Current features: CRUD operations Table filters MySQL and MongoDB parser and configurations generator Friendly name generator for table names and fields Role support Configurable Hooks on all the requests to change any data on the backend side GraphQL generator","title":"Overview"},{"location":"#installation","text":"Global installation npm install -g funfunzmc Project installation npm install funfunzmc","title":"Installation"},{"location":"#cli","text":"funfunzmc - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"CLI"},{"location":"contributing/","text":"Contributing Setting Up a Local Copy Clone the repo with git clone https://github.com/jwebcoder/funfunzmc Run npm in the root funfunzmc folder. Commands npm install - Install all the project dependencies. npm run dev - Runs the application in development mode. npm run start - Runs the application in production environment, uses the built version in the lib folder. npm run questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#setting-up-a-local-copy","text":"Clone the repo with git clone https://github.com/jwebcoder/funfunzmc Run npm in the root funfunzmc folder.","title":"Setting Up a Local Copy"},{"location":"contributing/#commands","text":"npm install - Install all the project dependencies. npm run dev - Runs the application in development mode. npm run start - Runs the application in production environment, uses the built version in the lib folder. npm run questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Commands"},{"location":"endgoals/","text":"End goals This project is intended to be developed in 3 different repositories. @funfunzmc/main @funfunzmc/frontend @funfunzmc/main Will contain the command line interface responsible to generate all the configuration files and a working server with the frontend for the back office already integrated Backend project of the back office, this will contain all the backend logic needed to handle all the changes of database data. The backend project can also be used has a middleware to an already existing express application, making the business logic completely separated from the back office logic. @funfunzmc/frontend Frontend project for the back office, available for everyone to give the ability to extend it at will.","title":"End Goals"},{"location":"endgoals/#end-goals","text":"This project is intended to be developed in 3 different repositories. @funfunzmc/main @funfunzmc/frontend","title":"End goals"},{"location":"endgoals/#funfunzmcmain","text":"Will contain the command line interface responsible to generate all the configuration files and a working server with the frontend for the back office already integrated Backend project of the back office, this will contain all the backend logic needed to handle all the changes of database data. The backend project can also be used has a middleware to an already existing express application, making the business logic completely separated from the back office logic.","title":"@funfunzmc/main"},{"location":"endgoals/#funfunzmcfrontend","text":"Frontend project for the back office, available for everyone to give the ability to extend it at will.","title":"@funfunzmc/frontend"},{"location":"configuration/config/","text":"Config file File structure { mysql : { host : string , // database host database : string , // database name user : string , // database user password : string , // database password ssl : boolean | SSLobject , // if ssl is needed }, server : { port : number , // port where the application runs }, } SSL Object","title":"Config"},{"location":"configuration/config/#config-file","text":"","title":"Config file"},{"location":"configuration/config/#file-structure","text":"{ mysql : { host : string , // database host database : string , // database name user : string , // database user password : string , // database password ssl : boolean | SSLobject , // if ssl is needed }, server : { port : number , // port where the application runs }, }","title":"File structure"},{"location":"configuration/config/#ssl-object","text":"","title":"SSL Object"},{"location":"configuration/settings/","text":"Settings file Model structure { name : string , visible : boolean , relations : [ { type : '1:n' | 'n:1' | 'm:n' , relationalTable : string , // the table containing the foreign keys foreignKey : string , // local id in the relationalTable remoteForeignKey : string , // remote id in the relationalTable remoteTable : string , }, ... ], roles : { create : [ string ], // array of role names read : [ string ], update : [ string ], delete : [ string ], }, columns : [ { name : string , searchable : boolean , // field used on search visible : { list : boolean , // field is returned on list requests detail : boolean , // field is returned on single get request relation : boolean , // field is returned on relation requests }, model : boolean | { isPk : boolean , // if column is primary key type : string , // sql column type allowNull : boolean , ... // other sql column options }, layout : { isTitle : boolean , label : string , listColumn : boolean | { ... // props for the frontend column component }, editField : boolean | { type : string , ... // other props for the frontend input component }, }, }, ... ], ... layout : { label : string , listPage : boolean | { chips : [ { label : string , columns : [ { name : string , label : { key : value , ... } }, ], }, ], ... // props for frontend table component }, searchField : boolean | { ... // props for frontend search component }, createButton : boolean | { ... // props for frontend create button component }, editButton : boolean | { ... // other props for frontend edit button component }, editPage : boolean | { sections : [ { id : string , label : string , accordion : true | false , ... }, ], ... // other props for frontend edit page }, deleteButton : boolean | { ... // props for frontend delete button component }, }, ... hooks : { [ key in Hooks ] ?: { before? : IHookFunction , after? : IHookFunction , } }, } Hooks Object type Hooks = 'getTableData' | 'getDistinctTableData' | 'getTableCount' | 'getRow' | 'insertRow' | 'updateRow' | 'deleteRow' IHookFunction = ( req : express.Request , res : express.Response , DB : knex , tableName : string , data? : any ) => Promise < any >","title":"Settings"},{"location":"configuration/settings/#settings-file","text":"","title":"Settings file"},{"location":"configuration/settings/#model-structure","text":"{ name : string , visible : boolean , relations : [ { type : '1:n' | 'n:1' | 'm:n' , relationalTable : string , // the table containing the foreign keys foreignKey : string , // local id in the relationalTable remoteForeignKey : string , // remote id in the relationalTable remoteTable : string , }, ... ], roles : { create : [ string ], // array of role names read : [ string ], update : [ string ], delete : [ string ], }, columns : [ { name : string , searchable : boolean , // field used on search visible : { list : boolean , // field is returned on list requests detail : boolean , // field is returned on single get request relation : boolean , // field is returned on relation requests }, model : boolean | { isPk : boolean , // if column is primary key type : string , // sql column type allowNull : boolean , ... // other sql column options }, layout : { isTitle : boolean , label : string , listColumn : boolean | { ... // props for the frontend column component }, editField : boolean | { type : string , ... // other props for the frontend input component }, }, }, ... ], ... layout : { label : string , listPage : boolean | { chips : [ { label : string , columns : [ { name : string , label : { key : value , ... } }, ], }, ], ... // props for frontend table component }, searchField : boolean | { ... // props for frontend search component }, createButton : boolean | { ... // props for frontend create button component }, editButton : boolean | { ... // other props for frontend edit button component }, editPage : boolean | { sections : [ { id : string , label : string , accordion : true | false , ... }, ], ... // other props for frontend edit page }, deleteButton : boolean | { ... // props for frontend delete button component }, }, ... hooks : { [ key in Hooks ] ?: { before? : IHookFunction , after? : IHookFunction , } }, }","title":"Model structure"},{"location":"configuration/settings/#hooks-object","text":"type Hooks = 'getTableData' | 'getDistinctTableData' | 'getTableCount' | 'getRow' | 'insertRow' | 'updateRow' | 'deleteRow' IHookFunction = ( req : express.Request , res : express.Response , DB : knex , tableName : string , data? : any ) => Promise < any >","title":"Hooks Object"},{"location":"usage/plugin/","text":"Plugin Usage const express = require ( 'express' ) const path = require ( 'path' ) const cookieParser = require ( 'cookie-parser' ) const mcConfig = require ( './mc/MCconfig.json' ) const mcSettings = require ( './mc/MCsettings,json' ) const funfunzMC = require ( 'funfunzmc' ) const indexRouter = require ( './routes/index' ) const app = express () app . use ( express . json ()) app . use ( express . urlencoded ({ extended : false })) app . use ( cookieParser ()) app . use ( express . static ( path . join ( __dirname , 'public' ))) app . use ( '/' , indexRouter ) app . use ( '/admin/api' , funfunzMC ({ config : mcConfig , settings : mcSettings , plugin : true , })) // error handler app . use ( function ( err , req , res ) { res . send ( 'error' ) }) module .exports = app","title":"Plugin"},{"location":"usage/plugin/#plugin","text":"","title":"Plugin"},{"location":"usage/plugin/#usage","text":"const express = require ( 'express' ) const path = require ( 'path' ) const cookieParser = require ( 'cookie-parser' ) const mcConfig = require ( './mc/MCconfig.json' ) const mcSettings = require ( './mc/MCsettings,json' ) const funfunzMC = require ( 'funfunzmc' ) const indexRouter = require ( './routes/index' ) const app = express () app . use ( express . json ()) app . use ( express . urlencoded ({ extended : false })) app . use ( cookieParser ()) app . use ( express . static ( path . join ( __dirname , 'public' ))) app . use ( '/' , indexRouter ) app . use ( '/admin/api' , funfunzMC ({ config : mcConfig , settings : mcSettings , plugin : true , })) // error handler app . use ( function ( err , req , res ) { res . send ( 'error' ) }) module .exports = app","title":"Usage"},{"location":"usage/quickstart/","text":"Quickstart Project setup npm init npm i funfunzmc Generate configurations node_modules/.bin/funfunzmc Running the application You can run the application in standalone or plugin mode. Standalone Please see the standalone project for further details. This mode will start the application without the need of any other package, the only requirements are the configuration files. Plugin Please see the plugin project for further details. Running the application in plugin mode will make FunfunzMC to return an expressJS middleware that you can use inside your expressJS applications.","title":"Quickstart"},{"location":"usage/quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"usage/quickstart/#project-setup","text":"npm init npm i funfunzmc","title":"Project setup"},{"location":"usage/quickstart/#generate-configurations","text":"node_modules/.bin/funfunzmc","title":"Generate configurations"},{"location":"usage/quickstart/#running-the-application","text":"You can run the application in standalone or plugin mode.","title":"Running the application"},{"location":"usage/quickstart/#standalone","text":"Please see the standalone project for further details. This mode will start the application without the need of any other package, the only requirements are the configuration files.","title":"Standalone"},{"location":"usage/quickstart/#plugin","text":"Please see the plugin project for further details. Running the application in plugin mode will make FunfunzMC to return an expressJS middleware that you can use inside your expressJS applications.","title":"Plugin"},{"location":"usage/standalone/","text":"Standalone Usage const mcConfig = require ( './mc/MCconfig.json' ) const mcSettings = require ( './mc/MCsettings,json' ) const funfunzMC = require ( 'funfunzmc' ) funfunzMC ({ config : mcConfig , settings : mcSettings }))","title":"Standalone"},{"location":"usage/standalone/#standalone","text":"","title":"Standalone"},{"location":"usage/standalone/#usage","text":"const mcConfig = require ( './mc/MCconfig.json' ) const mcSettings = require ( './mc/MCsettings,json' ) const funfunzMC = require ( 'funfunzmc' ) funfunzMC ({ config : mcConfig , settings : mcSettings }))","title":"Usage"}]}