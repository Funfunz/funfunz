{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FunfunzMC Documentation For the source code you can visit github funfunzmc . Overview funfunzmc was created due the lack of a functional backoffice generator in the NodeJS community. The goal is to generate a fully automated backoffice that can be used to directly handle all the database data. Features: CRUD operations Table search MySQL parser Friendly name generator for table names and fields Installation Global installation npm install -g funfunzmc Project installation npm install funfunzmc CLI funfunzmc questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Home"},{"location":"#funfunzmc-documentation","text":"For the source code you can visit github funfunzmc .","title":"FunfunzMC Documentation"},{"location":"#overview","text":"funfunzmc was created due the lack of a functional backoffice generator in the NodeJS community. The goal is to generate a fully automated backoffice that can be used to directly handle all the database data. Features: CRUD operations Table search MySQL parser Friendly name generator for table names and fields","title":"Overview"},{"location":"#installation","text":"Global installation npm install -g funfunzmc Project installation npm install funfunzmc","title":"Installation"},{"location":"#cli","text":"funfunzmc questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"CLI"},{"location":"contributing/","text":"Contributing Setting Up a Local Copy Clone the repo with git clone https://github.com/jwebcoder/funfunzmc Run npm in the root funfunzmc folder. Commands npm install - Install all the prject dependencies. npm run dev - Runs the application in development mode. npm run start - Runs the application in production environment, uses the built version in the lib folder. npm run questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#setting-up-a-local-copy","text":"Clone the repo with git clone https://github.com/jwebcoder/funfunzmc Run npm in the root funfunzmc folder.","title":"Setting Up a Local Copy"},{"location":"contributing/#commands","text":"npm install - Install all the prject dependencies. npm run dev - Runs the application in development mode. npm run start - Runs the application in production environment, uses the built version in the lib folder. npm run questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Commands"},{"location":"configuration/config/","text":"Config file File structure { mysql : { host : string , // database host database : string , // database name user : string , // database user password : string , // database password ssl : boolean | SSLobject , // if ssl is needed }, server : { port : number , // port where the application runs }, } SSL Object","title":"Config"},{"location":"configuration/config/#config-file","text":"","title":"Config file"},{"location":"configuration/config/#file-structure","text":"{ mysql : { host : string , // database host database : string , // database name user : string , // database user password : string , // database password ssl : boolean | SSLobject , // if ssl is needed }, server : { port : number , // port where the application runs }, }","title":"File structure"},{"location":"configuration/config/#ssl-object","text":"","title":"SSL Object"},{"location":"configuration/settings/","text":"Settings file Model structure { name : string , // name of the table verbose : string , // name shown on the frontend pk : string , // primary key column hooks : hooksObject , // explained bellow searchFields : [ string ], // array of columns where the default search should happen relations : relationsObject , // explained bellow visible : boolean , // table visible on the frontend roles : [ string ], // array of roles with authorization to view the table, all | admin | authenticaded | ... columns : [ // array of columns { name : string , // column name verbose : // name shown on the frontend, type : // data type, int(11) | varchar(255) | tinyint(1) | ..., allowNull : boolean , // if the column allows null values visible : { main : boolean , // visible on the table view detail : boolean , // visible on the detail/new view }, editable : boolean , // editable field order : 0 , // order on the frontend }, ... ] } Hooks Object","title":"Settings"},{"location":"configuration/settings/#settings-file","text":"","title":"Settings file"},{"location":"configuration/settings/#model-structure","text":"{ name : string , // name of the table verbose : string , // name shown on the frontend pk : string , // primary key column hooks : hooksObject , // explained bellow searchFields : [ string ], // array of columns where the default search should happen relations : relationsObject , // explained bellow visible : boolean , // table visible on the frontend roles : [ string ], // array of roles with authorization to view the table, all | admin | authenticaded | ... columns : [ // array of columns { name : string , // column name verbose : // name shown on the frontend, type : // data type, int(11) | varchar(255) | tinyint(1) | ..., allowNull : boolean , // if the column allows null values visible : { main : boolean , // visible on the table view detail : boolean , // visible on the detail/new view }, editable : boolean , // editable field order : 0 , // order on the frontend }, ... ] }","title":"Model structure"},{"location":"configuration/settings/#hooks-object","text":"","title":"Hooks Object"}]}