{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FunfunzMC Documentation For the source code you can visit Github funfunzmc . Overview funfunzmc was created due the lack of a functional back office generator in the NodeJS community. The goal is to generate a fully automated back office that can be used to directly handle all the database data. Current features: CRUD operations Table filters MySQL parser and configurations generator Friendly name generator for table names and fields Simple role support to display or hide tables Configurable Hooks on all the requests to change any data on the backend side Installation Global installation npm install -g funfunzmc Project installation npm install funfunzmc CLI funfunzmc questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Home"},{"location":"#funfunzmc-documentation","text":"For the source code you can visit Github funfunzmc .","title":"FunfunzMC Documentation"},{"location":"#overview","text":"funfunzmc was created due the lack of a functional back office generator in the NodeJS community. The goal is to generate a fully automated back office that can be used to directly handle all the database data. Current features: CRUD operations Table filters MySQL parser and configurations generator Friendly name generator for table names and fields Simple role support to display or hide tables Configurable Hooks on all the requests to change any data on the backend side","title":"Overview"},{"location":"#installation","text":"Global installation npm install -g funfunzmc Project installation npm install funfunzmc","title":"Installation"},{"location":"#cli","text":"funfunzmc questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"CLI"},{"location":"contributing/","text":"Contributing Setting Up a Local Copy Clone the repo with git clone https://github.com/jwebcoder/funfunzmc Run npm in the root funfunzmc folder. Commands npm install - Install all the project dependencies. npm run dev - Runs the application in development mode. npm run start - Runs the application in production environment, uses the built version in the lib folder. npm run questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#setting-up-a-local-copy","text":"Clone the repo with git clone https://github.com/jwebcoder/funfunzmc Run npm in the root funfunzmc folder.","title":"Setting Up a Local Copy"},{"location":"contributing/#commands","text":"npm install - Install all the project dependencies. npm run dev - Runs the application in development mode. npm run start - Runs the application in production environment, uses the built version in the lib folder. npm run questions - Runs the Wizard to setup the settings and configuration files needed to connect with a database.","title":"Commands"},{"location":"endgoals/","text":"End goals This project is intended to be developed in 3 different repositories. @funfunzmc/cli @funfunzmc/frontend @funfunzmc/backend @funfunzmc/cli Will contain the command line interface responsible to generate all the configuration files and a working server with the frontend for the back office already integrated @funfunzmc/frontend Frontend project for the back office, available for everyone to give the ability to extend it at will. @funfunzmc/backend Backend project of the back office, this will contain all the backend logic needed to handle all the changes of database data. The backend project can also be used has a middleware to an already existing express application, making the business logic completely separated from the back office logic.","title":"End Goals"},{"location":"endgoals/#end-goals","text":"This project is intended to be developed in 3 different repositories. @funfunzmc/cli @funfunzmc/frontend @funfunzmc/backend","title":"End goals"},{"location":"endgoals/#funfunzmccli","text":"Will contain the command line interface responsible to generate all the configuration files and a working server with the frontend for the back office already integrated","title":"@funfunzmc/cli"},{"location":"endgoals/#funfunzmcfrontend","text":"Frontend project for the back office, available for everyone to give the ability to extend it at will.","title":"@funfunzmc/frontend"},{"location":"endgoals/#funfunzmcbackend","text":"Backend project of the back office, this will contain all the backend logic needed to handle all the changes of database data. The backend project can also be used has a middleware to an already existing express application, making the business logic completely separated from the back office logic.","title":"@funfunzmc/backend"},{"location":"configuration/config/","text":"Config file File structure { mysql : { host : string , // database host database : string , // database name user : string , // database user password : string , // database password ssl : boolean | SSLobject , // if ssl is needed }, server : { port : number , // port where the application runs }, } SSL Object","title":"Config"},{"location":"configuration/config/#config-file","text":"","title":"Config file"},{"location":"configuration/config/#file-structure","text":"{ mysql : { host : string , // database host database : string , // database name user : string , // database user password : string , // database password ssl : boolean | SSLobject , // if ssl is needed }, server : { port : number , // port where the application runs }, }","title":"File structure"},{"location":"configuration/config/#ssl-object","text":"","title":"SSL Object"},{"location":"configuration/settings/","text":"Settings file Model structure { name : string , visible : boolean , relations : [ { type : 1:n | n:1 | m:n , relationalTable : string , foreignKey : string , remoteForeignKey : string , remoteTable : string , }, ... ], roles : { create : [ string ], // array of role names read : [ string ], write : [ string ], delete : [ string ], }, columns : [ { name : string , searchable : boolean , // field used on search visible : { list : boolean , // field is returned on list requests detail : boolean , // field is returned on single get request relation : boolean , // field is returned on relation requests }, model : boolean | { isPk : boolean , // if column is primary key type : string , // sql column type allowNull : boolean , ... // other sql column options }, layout : { isTitle : boolean , label : string , listColumn : boolean | { ... // props for the frontend column component }, editField : boolean | { type : string , ... // other props for the frontend input component }, }, }, ... ], ... layout : { label : string , listPage : boolean | { chips : [ { label : string , columns : [ { name : string , label : { key : value , ... } }, ], }, ], ... // props for frontend table component }, searchField : boolean | { ... // props for frontend search component }, createButton : boolean | { ... // props for frontend create button component }, editButton : boolean | { ... // other props for frontend edit button component }, editPage : boolean | { sections : [ { id : string , label : string , accordion : true | false , ... }, ], ... // other props for frontend edit page }, deleteButton : boolean | { ... // props for frontend delete button component }, }, ... } Relations object relations : { manyToMany : [ // array of many to many relations { verbose : string , // name shown on the frontend relationTable : string , // name of the relation table foreignKey : string , // foreignKey of the current table on the relation table localId : string , // relation field for the current table remoteTable : string , // name of the remote table remoteForeignKey : string , // foreignKey of the remote table on the relation table remoteId : string // relation field for the remote table } ], manyToOne : { // each key is a name of a related table string /*table name*/ : [ // array of keys used for the relation { fk : string , // foreign key on the related table target : string // key in the current table } ] } } Hooks Object hooks : { getTableData : hookDefinition , getTableCount : hookDefinition , updateRow : hookDefinition , insertRow : hookDefinition , deleteRow : hookDefinition } hookDefinition = { after : async ( req /* express request */ , res /* express response */ , DB /* Knex instance */ , tableName /* table name */ , data /* current result */ ) = { return data }, before : async ( req : /* express request */ , res /* express response */ , DB /* Knex instance */ , tableName /* table name */ , payload /* payload from the request */ ) = { return payload } }","title":"Settings"},{"location":"configuration/settings/#settings-file","text":"","title":"Settings file"},{"location":"configuration/settings/#model-structure","text":"{ name : string , visible : boolean , relations : [ { type : 1:n | n:1 | m:n , relationalTable : string , foreignKey : string , remoteForeignKey : string , remoteTable : string , }, ... ], roles : { create : [ string ], // array of role names read : [ string ], write : [ string ], delete : [ string ], }, columns : [ { name : string , searchable : boolean , // field used on search visible : { list : boolean , // field is returned on list requests detail : boolean , // field is returned on single get request relation : boolean , // field is returned on relation requests }, model : boolean | { isPk : boolean , // if column is primary key type : string , // sql column type allowNull : boolean , ... // other sql column options }, layout : { isTitle : boolean , label : string , listColumn : boolean | { ... // props for the frontend column component }, editField : boolean | { type : string , ... // other props for the frontend input component }, }, }, ... ], ... layout : { label : string , listPage : boolean | { chips : [ { label : string , columns : [ { name : string , label : { key : value , ... } }, ], }, ], ... // props for frontend table component }, searchField : boolean | { ... // props for frontend search component }, createButton : boolean | { ... // props for frontend create button component }, editButton : boolean | { ... // other props for frontend edit button component }, editPage : boolean | { sections : [ { id : string , label : string , accordion : true | false , ... }, ], ... // other props for frontend edit page }, deleteButton : boolean | { ... // props for frontend delete button component }, }, ... }","title":"Model structure"},{"location":"configuration/settings/#relations-object","text":"relations : { manyToMany : [ // array of many to many relations { verbose : string , // name shown on the frontend relationTable : string , // name of the relation table foreignKey : string , // foreignKey of the current table on the relation table localId : string , // relation field for the current table remoteTable : string , // name of the remote table remoteForeignKey : string , // foreignKey of the remote table on the relation table remoteId : string // relation field for the remote table } ], manyToOne : { // each key is a name of a related table string /*table name*/ : [ // array of keys used for the relation { fk : string , // foreign key on the related table target : string // key in the current table } ] } }","title":"Relations object"},{"location":"configuration/settings/#hooks-object","text":"hooks : { getTableData : hookDefinition , getTableCount : hookDefinition , updateRow : hookDefinition , insertRow : hookDefinition , deleteRow : hookDefinition } hookDefinition = { after : async ( req /* express request */ , res /* express response */ , DB /* Knex instance */ , tableName /* table name */ , data /* current result */ ) = { return data }, before : async ( req : /* express request */ , res /* express response */ , DB /* Knex instance */ , tableName /* table name */ , payload /* payload from the request */ ) = { return payload } }","title":"Hooks Object"}]}