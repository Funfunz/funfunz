"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _db = _interopRequireDefault(require("../db"));

var _types = require("../types");

var _utils = require("../utils");

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var debug = (0, _debug.default)('funfunzmc:controller-table');

function toRequestBuilder(relation, columnName) {
  return {
    values: new Set(),
    key: relation.key,
    display: relation.display,
    foreignKeyColumn: columnName
  };
}

var TableController =
/*#__PURE__*/
function () {
  function TableController() {
    _classCallCheck(this, TableController);

    debug('Created');
  }

  _createClass(TableController, [{
    key: "getTableConfig",
    value: function getTableConfig(req, res, next) {
      var TABLE_CONFIG = (0, _utils.getTableConfig)(req.params.table);
      var RESULT = {
        columns: TABLE_CONFIG.columns,
        name: TABLE_CONFIG.name,
        pk: TABLE_CONFIG.pk,
        verbose: TABLE_CONFIG.verbose
      };

      if (!(0, _utils.hasAuthorization)(TABLE_CONFIG.roles, req.user)) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(401, 'Not authorized'));
      }

      (0, _utils.addToResponse)(res, 'results')(RESULT);
      return (0, _utils.nextAndReturn)(next)(RESULT);
    }
  }, {
    key: "getTableData",
    value: function getTableData(req, res, next) {
      var _this = this;

      var PAGE_NUMBER = req.query.page || 0;
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      var COLUMNS = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'main');
      var LIMIT = 10;

      if (!(0, _utils.hasAuthorization)(TABLE_CONFIG.roles, req.user)) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(401, 'Not authorized'));
      }

      if (!_db.default.db) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
      }

      var DB = _db.default.db;
      var QUERY = DB.select(COLUMNS).from(TABLE_NAME);

      if (req.query.filter) {
        QUERY = (0, _utils.applyQueryFilters)(QUERY, req.query.filter, TABLE_CONFIG);
      }

      if (req.query.search) {
        QUERY = (0, _utils.applyQuerySearch)(QUERY, req.query.search, TABLE_CONFIG);
      }

      if (req.query.limit) {
        LIMIT = parseInt(req.query.limit, 10);
      }

      if (LIMIT > 0) {
        QUERY.offset(PAGE_NUMBER * LIMIT).limit(LIMIT);
      }

      return (0, _utils.runHook)(TABLE_CONFIG, 'getTableData', 'before', req, res, _db.default.db).then(function (hookResult) {
        if (hookResult) {
          if (hookResult.filter) {
            Object.keys(hookResult.filter).forEach(function (column) {
              if (Array.isArray(hookResult.filter[column])) {
                QUERY.whereIn(column, hookResult.filter[column]);
              }
            });
          }
        }

        return QUERY;
      }).then(function (results) {
        if (req.query.friendlyData) {
          return _this.addVerboseRelatedData(results, TABLE_CONFIG, DB);
        }

        return results;
      }).then(function (results) {
        return (0, _utils.runHook)(TABLE_CONFIG, 'getTableData', 'after', req, res, _db.default.db, results);
      }).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next));
    }
  }, {
    key: "getTableCount",
    value: function getTableCount(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        var QUERY = DB(TABLE_NAME).select('*');

        if (req.query.search) {
          QUERY = (0, _utils.applyQuerySearch)(QUERY, req.query.search, TABLE_CONFIG);
        }

        return Promise.all([DB, QUERY]);
      }).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            DB = _ref2[0],
            results = _ref2[1];

        return (0, _utils.runHook)(TABLE_CONFIG, 'getTableCount', 'after', req, res, DB, results);
      }).then((0, _utils.addToResponse)(res, 'count')).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "getRow",
    value: function getRow(req, res, next) {
      var _this2 = this;

      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        var requestedColumns = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'detail');
        return DB.select(requestedColumns).from("".concat(req.params.table)).where('id', req.params.id);
      }).then(function (results) {
        var relationQueries = [];

        if (req.query.includeRelations) {
          relationQueries = _this2.getRelationQueries(TABLE_CONFIG, results[0].id);
        }

        if (relationQueries.length) {
          return Promise.all([results[0]].concat(_toConsumableArray(relationQueries)));
        }

        return Promise.all([results[0]]);
      }).then(this.mergeRelatedData).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "insertRow",
    value: function insertRow(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        TABLE_CONFIG.columns.forEach(function (column) {
          if (column.type === 'datetime') {
            req.body.data[column.name] = new Date(req.body.data[column.name] || null);
          } else if (column.type === 'tinyint(1)') {
            req.body.data[column.name] = column.type ? 1 : 0;
          }
        });
        console.log('table', req.params.table);
        console.log('data', req.body.data);
        return DB(req.params.table).insert(req.body.data);
      }).then(function (results) {
        console.log('results', results);
        (0, _utils.addToResponse)(res, 'results')(results);
      }).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "updateRow",
    value: function updateRow(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        TABLE_CONFIG.columns.forEach(function (column) {
          if (column.type === 'datetime') {
            req.body.data[column.name] = new Date(req.body.data[column.name] || null);
          }
        });
        return DB(TABLE_NAME).where('id', req.params.id).update(req.body.data);
      }).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "deleteRow",
    value: function deleteRow(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        return DB(TABLE_NAME).where('id', req.params.id).del();
      }).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "addVerboseRelatedData",
    value: function addVerboseRelatedData(results, TABLE_CONFIG, DB) {
      var toRequest = {};
      var COLUMNS_WITH_RELATIONS = (0, _utils.getColumnsWithRelations)(TABLE_CONFIG);
      results.forEach(function (row, index) {
        COLUMNS_WITH_RELATIONS.forEach(function (column) {
          if (!column.relation) {
            throw new _types.HttpException(500, 'Column should have a relation');
          }

          var RELATION_TABLE_NAME = column.relation.table;

          if (!toRequest[RELATION_TABLE_NAME]) {
            toRequest[RELATION_TABLE_NAME] = toRequestBuilder(column.relation, column.name);
          }

          toRequest[RELATION_TABLE_NAME].values.add(row[column.name]);
        });
      });
      var relationQueries = [];
      Object.keys(toRequest).forEach(function (tableName) {
        relationQueries.push(DB.select(toRequest[tableName].display, toRequest[tableName].key).from(tableName).whereIn(toRequest[tableName].key, Array.from(toRequest[tableName].values.values())));
      });
      return Promise.all(relationQueries).then(function (relationResults) {
        var MATCHER = {};
        Object.values(toRequest).forEach(function (requestedTable, index) {
          var FOREIGN_KEY_COLUMN = requestedTable.foreignKeyColumn;
          MATCHER[FOREIGN_KEY_COLUMN] = {};
          relationResults[index].forEach(function (relationRow) {
            var CURRENT_VALUE = relationRow[requestedTable.key];
            var VALUE_TO_DISPLAY = relationRow[requestedTable.display];
            MATCHER[FOREIGN_KEY_COLUMN][CURRENT_VALUE] = VALUE_TO_DISPLAY;
          });
        });
        return results.map(function (row) {
          Object.values(toRequest).forEach(function (requestedTable) {
            var ROW_KEY = requestedTable.foreignKeyColumn;
            row[ROW_KEY] = MATCHER[ROW_KEY][row[ROW_KEY]];
          });
          return row;
        });
      });
    }
  }, {
    key: "requirementsCheck",
    value: function requirementsCheck(tableConfig, user, dbInstance, next) {
      if (!(0, _utils.hasAuthorization)(tableConfig.roles, user)) {
        return Promise.reject(new _types.HttpException(401, 'Not authorized'));
      }

      if (!dbInstance.db) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
      }

      return Promise.resolve(dbInstance.db);
    }
  }, {
    key: "getRelationQueries",
    value: function getRelationQueries(TABLE_CONFIG, parentId) {
      var _this3 = this;

      var relationQueries = [];

      if (TABLE_CONFIG.relations && TABLE_CONFIG.relations.manyToOne) {
        var MANY_TO_ONE = TABLE_CONFIG.relations.manyToOne;
        var KEYS = Object.keys(MANY_TO_ONE);
        KEYS.forEach(function (tableName) {
          relationQueries.push(_this3.getRelatedRow(tableName, MANY_TO_ONE[tableName], parentId));
        });
      }

      return relationQueries;
    }
  }, {
    key: "getRelatedRow",
    value: function getRelatedRow(tableName, columnName, parentId) {
      if (!_db.default.db) {
        throw new _types.HttpException(500, 'No database');
      }

      var TABLE_NAME = tableName;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      var requestedColumns = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'detail');
      return _db.default.db.select(requestedColumns).from(tableName).where(columnName, parentId).then(function (results) {
        return {
          results: results,
          tableName: tableName
        };
      });
    }
  }, {
    key: "mergeRelatedData",
    value: function mergeRelatedData(_ref3) {
      var _ref4 = _toArray(_ref3),
          results = _ref4[0],
          relations = _ref4.slice(1);

      if (relations && relations.length) {
        relations.forEach(function (relation) {
          results[relation.tableName] = relation.results;
        });
      }

      return results;
    }
  }]);

  return TableController;
}();

var _default = TableController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvY29udHJvbGxlcnMvVGFibGVDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbImRlYnVnIiwidG9SZXF1ZXN0QnVpbGRlciIsInJlbGF0aW9uIiwiY29sdW1uTmFtZSIsInZhbHVlcyIsIlNldCIsImtleSIsImRpc3BsYXkiLCJmb3JlaWduS2V5Q29sdW1uIiwiVGFibGVDb250cm9sbGVyIiwicmVxIiwicmVzIiwibmV4dCIsIlRBQkxFX0NPTkZJRyIsInBhcmFtcyIsInRhYmxlIiwiUkVTVUxUIiwiY29sdW1ucyIsIm5hbWUiLCJwayIsInZlcmJvc2UiLCJyb2xlcyIsInVzZXIiLCJIdHRwRXhjZXB0aW9uIiwiUEFHRV9OVU1CRVIiLCJxdWVyeSIsInBhZ2UiLCJUQUJMRV9OQU1FIiwiQ09MVU1OUyIsIkxJTUlUIiwiZGF0YWJhc2UiLCJkYiIsIkRCIiwiUVVFUlkiLCJzZWxlY3QiLCJmcm9tIiwiZmlsdGVyIiwic2VhcmNoIiwibGltaXQiLCJwYXJzZUludCIsIm9mZnNldCIsInRoZW4iLCJob29rUmVzdWx0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJjb2x1bW4iLCJBcnJheSIsImlzQXJyYXkiLCJ3aGVyZUluIiwicmVzdWx0cyIsImZyaWVuZGx5RGF0YSIsImFkZFZlcmJvc2VSZWxhdGVkRGF0YSIsInJlcXVpcmVtZW50c0NoZWNrIiwiUHJvbWlzZSIsImFsbCIsImNhdGNoIiwicmVxdWVzdGVkQ29sdW1ucyIsIndoZXJlIiwiaWQiLCJyZWxhdGlvblF1ZXJpZXMiLCJpbmNsdWRlUmVsYXRpb25zIiwiZ2V0UmVsYXRpb25RdWVyaWVzIiwibGVuZ3RoIiwibWVyZ2VSZWxhdGVkRGF0YSIsInR5cGUiLCJib2R5IiwiZGF0YSIsIkRhdGUiLCJjb25zb2xlIiwibG9nIiwiaW5zZXJ0IiwidXBkYXRlIiwiZGVsIiwidG9SZXF1ZXN0IiwiQ09MVU1OU19XSVRIX1JFTEFUSU9OUyIsInJvdyIsImluZGV4IiwiUkVMQVRJT05fVEFCTEVfTkFNRSIsImFkZCIsInRhYmxlTmFtZSIsInB1c2giLCJyZWxhdGlvblJlc3VsdHMiLCJNQVRDSEVSIiwicmVxdWVzdGVkVGFibGUiLCJGT1JFSUdOX0tFWV9DT0xVTU4iLCJyZWxhdGlvblJvdyIsIkNVUlJFTlRfVkFMVUUiLCJWQUxVRV9UT19ESVNQTEFZIiwibWFwIiwiUk9XX0tFWSIsInRhYmxlQ29uZmlnIiwiZGJJbnN0YW5jZSIsInJlamVjdCIsInJlc29sdmUiLCJwYXJlbnRJZCIsInJlbGF0aW9ucyIsIm1hbnlUb09uZSIsIk1BTllfVE9fT05FIiwiS0VZUyIsImdldFJlbGF0ZWRSb3ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLElBQU1BLEtBQUssR0FBRyxvQkFBTSw0QkFBTixDQUFkOztBQWFBLFNBQVNDLGdCQUFULENBQTBCQyxRQUExQixFQUFxREMsVUFBckQsRUFBeUY7QUFDdkYsU0FBTztBQUNMQyxJQUFBQSxNQUFNLEVBQUUsSUFBSUMsR0FBSixFQURIO0FBRUxDLElBQUFBLEdBQUcsRUFBRUosUUFBUSxDQUFDSSxHQUZUO0FBR0xDLElBQUFBLE9BQU8sRUFBRUwsUUFBUSxDQUFDSyxPQUhiO0FBSUxDLElBQUFBLGdCQUFnQixFQUFFTDtBQUpiLEdBQVA7QUFNRDs7SUFFS00sZTs7O0FBQ0osNkJBQWM7QUFBQTs7QUFDWlQsSUFBQUEsS0FBSyxDQUFDLFNBQUQsQ0FBTDtBQUNEOzs7O21DQUVxQlUsRyxFQUFpQkMsRyxFQUFrQkMsSSxFQUFvQjtBQUMzRSxVQUFNQyxZQUFZLEdBQUcsMkJBQWVILEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxLQUExQixDQUFyQjtBQUNBLFVBQU1DLE1BQU0sR0FBRztBQUNiQyxRQUFBQSxPQUFPLEVBQUVKLFlBQVksQ0FBQ0ksT0FEVDtBQUViQyxRQUFBQSxJQUFJLEVBQUVMLFlBQVksQ0FBQ0ssSUFGTjtBQUdiQyxRQUFBQSxFQUFFLEVBQUVOLFlB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ZWMsVUFBZixDQUFyQjtBQUVBLFVBQU04QixnQkFBZ0IsR0FBRyxzQ0FBMEI1QyxZQUExQixFQUF3QyxRQUF4QyxDQUF6QjtBQUNBLGFBQU9pQixZQUFTQyxFQUFULENBQVlHLE1BQVosQ0FBbUJ1QixnQkFBbkIsRUFDSnRCLElBREksQ0FDQzZDLFNBREQsRUFFSnRCLEtBRkksQ0FFRXZELFVBRkYsRUFFYzRGLFFBRmQsRUFFd0J0RCxJQUZ4QixDQUdILFVBQUNTLE9BQUQ7QUFBQSxlQUFjO0FBQ1pBLFVBQUFBLE9BQU8sRUFBUEEsT0FEWTtBQUVaOEIsVUFBQUEsU0FBUyxFQUFUQTtBQUZZLFNBQWQ7QUFBQSxPQUhHLENBQVA7QUFRRDs7OzRDQUVzRDtBQUFBO0FBQUEsVUFBN0I5QixPQUE2QjtBQUFBLFVBQWpCOEMsU0FBaUI7O0FBQ3JELFVBQUlBLFNBQVMsSUFBSUEsU0FBUyxDQUFDakMsTUFBM0IsRUFBbUM7QUFDakNpQyxRQUFBQSxTQUFTLENBQUNuRCxPQUFWLENBQ0UsVUFBQzNDLFFBQUQsRUFBbUQ7QUFDakRnRCxVQUFBQSxPQUFPLENBQUNoRCxRQUFRLENBQUM4RSxTQUFWLENBQVAsR0FBOEI5RSxRQUFRLENBQUNnRCxPQUF2QztBQUNELFNBSEg7QUFLRDs7QUFFRCxhQUFPQSxPQUFQO0FBQ0Q7Ozs7OztlQUdZekMsZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkYXRhYmFzZSwgeyBEYXRhYmFzZSB9IGZyb20gJ0Byb290L2FwaS9kYidcbmltcG9ydCB7IEh0dHBFeGNlcHRpb24sIElNQ1JlcXVlc3QsIElNQ1Jlc3BvbnNlLCBJVXNlciB9IGZyb20gJ0Byb290L2FwaS90eXBlcydcbmltcG9ydCB7XG4gIGFkZFRvUmVzcG9uc2UsXG4gIGFwcGx5UXVlcnlGaWx0ZXJzLFxuICBhcHBseVF1ZXJ5U2VhcmNoLFxuICBjYXRjaE1pZGRsZXdhcmUsXG4gIGZpbHRlclZpc2libGVUYWJsZUNvbHVtbnMsXG4gIGdldENvbHVtbnNXaXRoUmVsYXRpb25zLFxuICBnZXRUYWJsZUNvbmZpZyxcbiAgaGFzQXV0aG9yaXphdGlvbixcbiAgbmV4dEFuZFJldHVybixcbiAgcnVuSG9va1xufSBmcm9tICdAcm9vdC9hcGkvdXRpbHMnXG5pbXBvcnQgeyBJQ29sdW1uUmVsYXRpb24sIElUYWJsZUluZm8gfSBmcm9tICdAcm9vdC9jb25maWdHZW5lcmF0b3InXG5pbXBvcnQgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnXG5pbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QgfSBmcm9tICdleHByZXNzJ1xuaW1wb3J0IEtuZXggZnJvbSAnS25leCdcblxuY29uc3QgZGVidWcgPSBEZWJ1ZygnZnVuZnVuem1jOmNvbnRyb2xsZXItdGFibGUnKVxuXG5pbnRlcmZhY2UgSVRvUmVxdWVzdEl0ZW0ge1xuICB2YWx1ZXM6IFNldDxudW1iZXI+LFxuICBrZXk6IHN0cmluZyxcbiAgZGlzcGxheTogc3RyaW5nLFxuICBmb3JlaWduS2V5Q29sdW1uOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIElUb1JlcXVlc3Qge1xuICBba2V5OiBzdHJpbmddOiBJVG9SZXF1ZXN0SXRlbSxcbn1cblxuZnVuY3Rpb24gdG9SZXF1ZXN0QnVpbGRlcihyZWxhdGlvbjogSUNvbHVtblJlbGF0aW9uLCBjb2x1bW5OYW1lOiBzdHJpbmcpOiBJVG9SZXF1ZXN0SXRlbSB7XG4gIHJldHVybiB7XG4gICAgdmFsdWVzOiBuZXcgU2V0PG51bWJlcj4oKSxcbiAgICBrZXk6IHJlbGF0aW9uLmtleSxcbiAgICBkaXNwbGF5OiByZWxhdGlvbi5kaXNwbGF5LFxuICAgIGZvcmVpZ25LZXlDb2x1bW46IGNvbHVtbk5hbWUsXG4gIH1cbn1cblxuY2xhc3MgVGFibGVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgZGVidWcoJ0NyZWF0ZWQnKVxuICB9XG5cbiAgcHVibGljIGdldFRhYmxlQ29uZmlnKHJlcTogSU1DUmVxdWVzdCwgcmVzOiBJTUNSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gICAgY29uc3QgVEFCTEVfQ09ORklHID0gZ2V0VGFibGVDb25maWcocmVxLnBhcmFtcy50YWJsZSlcbiAgICBjb25zdCBSRVNVTFQgPSB7XG4gICAgICBjb2x1bW5zOiBUQUJMRV9DT05GSUcuY29sdW1ucyxcbiAgICAgIG5hbWU6IFRBQkxFX0NPTkZJRy5uYW1lLFxuICAgICAgcGs6IFRBQkxFX0NPTkZJRy5wayxcbiAgICAgIHZlcmJvc2U6IFRBQkxFX0NPTkZJRy52ZXJib3NlLFxuICAgIH1cblxuICAgIGlmICghaGFzQXV0aG9yaXphdGlvbihUQUJMRV9DT05GSUcucm9sZXMsIHJlcS51c2VyKSkge1xuICAgICAgcmV0dXJuIGNhdGNoTWlkZGxld2FyZShuZXh0KShuZXcgSHR0cEV4Y2VwdGlvbig0MDEsICdOb3QgYXV0aG9yaXplZCcpKVxuICAgIH1cbiAgICBhZGRUb1Jlc3BvbnNlKHJlcywgJ3Jlc3VsdHMnKShSRVNVTFQpXG4gICAgcmV0dXJuIG5leHRBbmRSZXR1cm4obmV4dCkoUkVTVUxUKVxuICB9XG5cbiAgcHVibGljIGdldFRhYmxlRGF0YShyZXE6IElNQ1JlcXVlc3QsIHJlczogSU1DUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xuICAgIGNvbnN0IFBBR0VfTlVNQkVSID0gcmVxLnF1ZXJ5LnBhZ2UgfHwgMFxuICAgIGNvbnN0IFRBQkxFX05BTUUgPSByZXEucGFyYW1zLnRhYmxlXG4gICAgY29uc3QgVEFCTEVfQ09ORklHID0gZ2V0VGFibGVDb25maWcoVEFCTEVfTkFNRSlcbiAgICBjb25zdCBDT0xVTU5TID0gZmlsdGVyVmlzaWJsZVRhYmxlQ29sdW1ucyhUQUJMRV9DT05GSUcsICdtYWluJylcbiAgICBsZXQgTElNSVQgPSAxMFxuXG4gICAgaWYgKCFoYXNBdXRob3JpemF0aW9uKFRBQkxFX0NPTkZJRy5yb2xlcywgcmVxLnVzZXIpKSB7XG4gICAgICByZXR1cm4gY2F0Y2hNaWRkbGV3YXJlKG5leHQpKG5ldyBIdHRwRXhjZXB0aW9uKDQwMSwgJ05vdCBhdXRob3JpemVkJykpXG4gICAgfVxuICAgIGlmICghZGF0YWJhc2UuZGIpIHtcbiAgICAgIHJldHVybiBjYXRjaE1pZGRsZXdhcmUobmV4dCkobmV3IEh0dHBFeGNlcHRpb24oNTAwLCAnTm8gZGF0YWJhc2UnKSlcbiAgICB9XG4gICAgY29uc3QgREIgPSBkYXRhYmFzZS5kYlxuICAgIGxldCBRVUVSWSA9IERCLnNlbGVjdChDT0xVTU5TKS5mcm9tKFRBQkxFX05BTUUpXG4gICAgaWYgKHJlcS5xdWVyeS5maWx0ZXIpIHtcbiAgICAgIFFVRVJZID0gYXBwbHlRdWVyeUZpbHRlcnMoUVVFUlksIHJlcS5xdWVyeS5maWx0ZXIsIFRBQkxFX0NPTkZJRylcbiAgICB9XG5cbiAgICBpZiAocmVxLnF1ZXJ5LnNlYXJjaCkge1xuICAgICAgUVVFUlkgPSBhcHBseVF1ZXJ5U2VhcmNoKFFVRVJZLCByZXEucXVlcnkuc2VhcmNoLCBUQUJMRV9DT05GSUcpXG4gICAgfVxuXG4gICAgaWYgKHJlcS5xdWVyeS5saW1pdCkge1xuICAgICAgTElNSVQgPSBwYXJzZUludChyZXEucXVlcnkubGltaXQsIDEwKVxuICAgIH1cbiAgICBpZiAoTElNSVQgPiAwKSB7XG4gICAgICBRVUVSWS5vZmZzZXQoKFBBR0VfTlVNQkVSKSAqIExJTUlUKS5saW1pdChMSU1JVClcbiAgICB9XG5cbiAgICByZXR1cm4gcnVuSG9vayhUQUJMRV9DT05GSUcsICdnZXRUYWJsZURhdGEnLCAnYmVmb3JlJywgcmVxLCByZXMsIGRhdGFiYXNlLmRiKS50aGVuKFxuICAgICAgKGhvb2tSZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKGhvb2tSZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaG9va1Jlc3VsdC5maWx0ZXIpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGhvb2tSZXN1bHQuZmlsdGVyKS5mb3JFYWNoKFxuICAgICAgICAgICAgICAoY29sdW1uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaG9va1Jlc3VsdC5maWx0ZXJbY29sdW1uXSkpIHtcbiAgICAgICAgICAgICAgICAgIFFVRVJZLndoZXJlSW4oY29sdW1uLCBob29rUmVzdWx0LmZpbHRlcltjb2x1bW5dKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUVVFUllcbiAgICAgIH1cbiAgICApLnRoZW4oXG4gICAgICAocmVzdWx0cykgPT4ge1xuICAgICAgICBpZiAocmVxLnF1ZXJ5LmZyaWVuZGx5RGF0YSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmFkZFZlcmJvc2VSZWxhdGVkRGF0YShyZXN1bHRzLCBUQUJMRV9DT05GSUcsIERCKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzXG4gICAgICB9XG4gICAgKS50aGVuKFxuICAgICAgKHJlc3VsdHMpID0+IHtcbiAgICAgICAgcmV0dXJuIHJ1bkhvb2soVEFCTEVfQ09ORklHLCAnZ2V0VGFibGVEYXRhJywgJ2FmdGVyJywgcmVxLCByZXMsIGRhdGFiYXNlLmRiLCByZXN1bHRzKVxuICAgICAgfVxuICAgICkudGhlbihcbiAgICAgIGFkZFRvUmVzcG9uc2UocmVzLCAncmVzdWx0cycpXG4gICAgKS50aGVuKFxuICAgICAgbmV4dEFuZFJldHVybihuZXh0KVxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBnZXRUYWJsZUNvdW50KHJlcTogSU1DUmVxdWVzdCwgcmVzOiBJTUNSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gICAgY29uc3QgVEFCTEVfTkFNRSA9IHJlcS5wYXJhbXMudGFibGVcbiAgICBjb25zdCBUQUJMRV9DT05GSUcgPSBnZXRUYWJsZUNvbmZpZyhUQUJMRV9OQU1FKVxuXG4gICAgcmV0dXJuIHRoaXMucmVxdWlyZW1lbnRzQ2hlY2soVEFCTEVfQ09ORklHLCByZXEudXNlciwgZGF0YWJhc2UsIG5leHQpLnRoZW4oXG4gICAgICAoREIpID0+IHtcbiAgICAgICAgbGV0IFFVRVJZID0gREIoVEFCTEVfTkFNRSkuc2VsZWN0KCcqJylcbiAgICAgICAgaWYgKHJlcS5xdWVyeS5zZWFyY2gpIHtcbiAgICAgICAgICBRVUVSWSA9IGFwcGx5UXVlcnlTZWFyY2goUVVFUlksIHJlcS5xdWVyeS5zZWFyY2gsIFRBQkxFX0NPTkZJRylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW0RCLCBRVUVSWV0pXG4gICAgICB9XG4gICAgKS50aGVuKFxuICAgICAgKFtEQiwgcmVzdWx0c10pID0+IHtcbiAgICAgICAgcmV0dXJuIHJ1bkhvb2soVEFCTEVfQ09ORklHLCAnZ2V0VGFibGVDb3VudCcsICdhZnRlcicsIHJlcSwgcmVzLCBEQiwgcmVzdWx0cylcbiAgICAgIH1cbiAgICApLnRoZW4oXG4gICAgICBhZGRUb1Jlc3BvbnNlKHJlcywgJ2NvdW50JylcbiAgICApLnRoZW4oXG4gICAgICBuZXh0QW5kUmV0dXJuKG5leHQpXG4gICAgKS5jYXRjaChcbiAgICAgIGNhdGNoTWlkZGxld2FyZShuZXh0KVxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBnZXRSb3cocmVxOiBJTUNSZXF1ZXN0LCByZXM6IElNQ1Jlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgICBjb25zdCBUQUJMRV9OQU1FID0gcmVxLnBhcmFtcy50YWJsZVxuICAgIGNvbnN0IFRBQkxFX0NPTkZJRyA9IGdldFRhYmxlQ29uZmlnKFRBQkxFX05BTUUpXG5cbiAgICByZXR1cm4gdGhpcy5yZXF1aXJlbWVudHNDaGVjayhUQUJMRV9DT05GSUcsIHJlcS51c2VyLCBkYXRhYmFzZSwgbmV4dCkudGhlbihcbiAgICAgIChEQikgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ZWRDb2x1bW5zID0gZmlsdGVyVmlzaWJsZVRhYmxlQ29sdW1ucyhUQUJMRV9DT05GSUcsICdkZXRhaWwnKVxuXG4gICAgICAgIHJldHVybiBEQi5zZWxlY3QocmVxdWVzdGVkQ29sdW1ucylcbiAgICAgICAgICAuZnJvbShgJHtyZXEucGFyYW1zLnRhYmxlfWApXG4gICAgICAgICAgLndoZXJlKCdpZCcsIHJlcS5wYXJhbXMuaWQpXG4gICAgICB9XG4gICAgKS50aGVuKFxuICAgICAgKHJlc3VsdHMpID0+IHtcbiAgICAgICAgbGV0IHJlbGF0aW9uUXVlcmllczogQXJyYXk8Qmx1ZWJpcmQ8e30+PiA9IFtdXG4gICAgICAgIGlmIChyZXEucXVlcnkuaW5jbHVkZVJlbGF0aW9ucykge1xuICAgICAgICAgIHJlbGF0aW9uUXVlcmllcyA9IHRoaXMuZ2V0UmVsYXRpb25RdWVyaWVzKFRBQkxFX0NPTkZJRywgcmVzdWx0c1swXS5pZClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWxhdGlvblF1ZXJpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHJlc3VsdHNbMF0sXG4gICAgICAgICAgICAuLi5yZWxhdGlvblF1ZXJpZXMsXG4gICAgICAgICAgXSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgcmVzdWx0c1swXSxcbiAgICAgICAgXSlcbiAgICAgIH1cbiAgICApLnRoZW4oXG4gICAgICB0aGlzLm1lcmdlUmVsYXRlZERhdGFcbiAgICApLnRoZW4oXG4gICAgICBhZGRUb1Jlc3BvbnNlKHJlcywgJ3Jlc3VsdHMnKVxuICAgICkudGhlbihcbiAgICAgIG5leHRBbmRSZXR1cm4obmV4dClcbiAgICApLmNhdGNoKFxuICAgICAgY2F0Y2hNaWRkbGV3YXJlKG5leHQpXG4gICAgKVxuICB9XG5cbiAgcHVibGljIGluc2VydFJvdyhyZXE6IElNQ1JlcXVlc3QsIHJlczogSU1DUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xuICAgIGNvbnN0IFRBQkxFX05BTUUgPSByZXEucGFyYW1zLnRhYmxlXG4gICAgY29uc3QgVEFCTEVfQ09ORklHID0gZ2V0VGFibGVDb25maWcoVEFCTEVfTkFNRSlcblxuICAgIHJldHVybiB0aGlzLnJlcXVpcmVtZW50c0NoZWNrKFRBQkxFX0NPTkZJRywgcmVxLnVzZXIsIGRhdGFiYXNlLCBuZXh0KS50aGVuKFxuICAgICAgKERCKSA9PiB7XG4gICAgICAgIFRBQkxFX0NPTkZJRy5jb2x1bW5zLmZvckVhY2goXG4gICAgICAgICAgKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbHVtbi50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAgIHJlcS5ib2R5LmRhdGFbY29sdW1uLm5hbWVdID0gbmV3IERhdGUocmVxLmJvZHkuZGF0YVtjb2x1bW4ubmFtZV0gfHwgbnVsbClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sdW1uLnR5cGUgPT09ICd0aW55aW50KDEpJykge1xuICAgICAgICAgICAgICByZXEuYm9keS5kYXRhW2NvbHVtbi5uYW1lXSA9IGNvbHVtbi50eXBlID8gMSA6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgY29uc29sZS5sb2coJ3RhYmxlJywgcmVxLnBhcmFtcy50YWJsZSlcbiAgICAgICAgY29uc29sZS5sb2coJ2RhdGEnLCByZXEuYm9keS5kYXRhKVxuICAgICAgICByZXR1cm4gREIocmVxLnBhcmFtcy50YWJsZSkuaW5zZXJ0KHJlcS5ib2R5LmRhdGEpXG4gICAgICB9XG4gICAgKS50aGVuKFxuICAgICAgKHJlc3VsdHMpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Jlc3VsdHMnLCByZXN1bHRzKVxuICAgICAgICBhZGRUb1Jlc3BvbnNlKHJlcywgJ3Jlc3VsdHMnKShyZXN1bHRzKVxuICAgICAgfVxuICAgICkudGhlbihcbiAgICAgIG5leHRBbmRSZXR1cm4obmV4dClcbiAgICApLmNhdGNoKFxuICAgICAgY2F0Y2hNaWRkbGV3YXJlKG5leHQpXG4gICAgKVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZVJvdyhyZXE6IElNQ1JlcXVlc3QsIHJlczogSU1DUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xuICAgIGNvbnN0IFRBQkxFX05BTUUgPSByZXEucGFyYW1zLnRhYmxlXG4gICAgY29uc3QgVEFCTEVfQ09ORklHID0gZ2V0VGFibGVDb25maWcoVEFCTEVfTkFNRSlcblxuICAgIHJldHVybiB0aGlzLnJlcXVpcmVtZW50c0NoZWNrKFRBQkxFX0NPTkZJRywgcmVxLnVzZXIsIGRhdGFiYXNlLCBuZXh0KS50aGVuKFxuICAgICAgKERCKSA9PiB7XG4gICAgICAgIFRBQkxFX0NPTkZJRy5jb2x1bW5zLmZvckVhY2goXG4gICAgICAgICAgKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbHVtbi50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICAgICAgICAgIHJlcS5ib2R5LmRhdGFbY29sdW1uLm5hbWVdID0gbmV3IERhdGUocmVxLmJvZHkuZGF0YVtjb2x1bW4ubmFtZV0gfHwgbnVsbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gREIoVEFCTEVfTkFNRSkud2hlcmUoJ2lkJywgcmVxLnBhcmFtcy5pZCkudXBkYXRlKHJlcS5ib2R5LmRhdGEpXG4gICAgICB9XG4gICAgKS50aGVuKFxuICAgICAgYWRkVG9SZXNwb25zZShyZXMsICdyZXN1bHRzJylcbiAgICApLnRoZW4oXG4gICAgICBuZXh0QW5kUmV0dXJuKG5leHQpXG4gICAgKS5jYXRjaChcbiAgICAgIGNhdGNoTWlkZGxld2FyZShuZXh0KVxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGVSb3cocmVxOiBJTUNSZXF1ZXN0LCByZXM6IElNQ1Jlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgICBjb25zdCBUQUJMRV9OQU1FID0gcmVxLnBhcmFtcy50YWJsZVxuICAgIGNvbnN0IFRBQkxFX0NPTkZJRyA9IGdldFRhYmxlQ29uZmlnKFRBQkxFX05BTUUpXG5cbiAgICByZXR1cm4gdGhpcy5yZXF1aXJlbWVudHNDaGVjayhUQUJMRV9DT05GSUcsIHJlcS51c2VyLCBkYXRhYmFzZSwgbmV4dCkudGhlbihcbiAgICAgIChEQikgPT4ge1xuICAgICAgICByZXR1cm4gREIoVEFCTEVfTkFNRSkud2hlcmUoJ2lkJywgcmVxLnBhcmFtcy5pZCkuZGVsKClcbiAgICAgIH1cbiAgICApLnRoZW4oXG4gICAgICBhZGRUb1Jlc3BvbnNlKHJlcywgJ3Jlc3VsdHMnKVxuICAgICkudGhlbihcbiAgICAgIG5leHRBbmRSZXR1cm4obmV4dClcbiAgICApLmNhdGNoKFxuICAgICAgY2F0Y2hNaWRkbGV3YXJlKG5leHQpXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRWZXJib3NlUmVsYXRlZERhdGEocmVzdWx0czogYW55W10sIFRBQkxFX0NPTkZJRzogSVRhYmxlSW5mbywgREI6IEtuZXgpIHtcbiAgICBjb25zdCB0b1JlcXVlc3Q6IElUb1JlcXVlc3QgPSB7fVxuICAgIGNvbnN0IENPTFVNTlNfV0lUSF9SRUxBVElPTlMgPSBnZXRDb2x1bW5zV2l0aFJlbGF0aW9ucyhUQUJMRV9DT05GSUcpXG4gICAgcmVzdWx0cy5mb3JFYWNoKFxuICAgICAgKHJvdzogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIENPTFVNTlNfV0lUSF9SRUxBVElPTlMuZm9yRWFjaChcbiAgICAgICAgICAoY29sdW1uKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbHVtbi5yZWxhdGlvbikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgSHR0cEV4Y2VwdGlvbig1MDAsICdDb2x1bW4gc2hvdWxkIGhhdmUgYSByZWxhdGlvbicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBSRUxBVElPTl9UQUJMRV9OQU1FID0gY29sdW1uLnJlbGF0aW9uLnRhYmxlXG5cbiAgICAgICAgICAgIGlmICghdG9SZXF1ZXN0W1JFTEFUSU9OX1RBQkxFX05BTUVdKSB7XG4gICAgICAgICAgICAgIHRvUmVxdWVzdFtSRUxBVElPTl9UQUJMRV9OQU1FXSA9IHRvUmVxdWVzdEJ1aWxkZXIoY29sdW1uLnJlbGF0aW9uLCBjb2x1bW4ubmFtZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG9SZXF1ZXN0W1JFTEFUSU9OX1RBQkxFX05BTUVdLnZhbHVlcy5hZGQocm93W2NvbHVtbi5uYW1lXSlcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH1cbiAgICApXG5cbiAgICBjb25zdCByZWxhdGlvblF1ZXJpZXM6IEtuZXguUXVlcnlCdWlsZGVyW10gPSBbXVxuICAgIE9iamVjdC5rZXlzKHRvUmVxdWVzdCkuZm9yRWFjaChcbiAgICAgICh0YWJsZU5hbWUpID0+IHtcbiAgICAgICAgcmVsYXRpb25RdWVyaWVzLnB1c2goXG4gICAgICAgICAgREIuc2VsZWN0KHRvUmVxdWVzdFt0YWJsZU5hbWVdLmRpc3BsYXksIHRvUmVxdWVzdFt0YWJsZU5hbWVdLmtleSlcbiAgICAgICAgICAgIC5mcm9tKHRhYmxlTmFtZSlcbiAgICAgICAgICAgIC53aGVyZUluKHRvUmVxdWVzdFt0YWJsZU5hbWVdLmtleSwgQXJyYXkuZnJvbSh0b1JlcXVlc3RbdGFibGVOYW1lXS52YWx1ZXMudmFsdWVzKCkpKVxuICAgICAgICApXG4gICAgICB9XG4gICAgKVxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsPGFueVtdPihyZWxhdGlvblF1ZXJpZXMpLnRoZW4oXG4gICAgICAocmVsYXRpb25SZXN1bHRzKSA9PiB7XG4gICAgICAgIGNvbnN0IE1BVENIRVI6IHtcbiAgICAgICAgICBbZm9yZWlnbktleUNvbHVtbjogc3RyaW5nXToge1xuICAgICAgICAgICAgW3ZhbHVlOiBzdHJpbmddOiBzdHJpbmdcbiAgICAgICAgICB9XG4gICAgICAgIH0gPSB7fVxuICAgICAgICBPYmplY3QudmFsdWVzKHRvUmVxdWVzdCkuZm9yRWFjaChcbiAgICAgICAgICAocmVxdWVzdGVkVGFibGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBGT1JFSUdOX0tFWV9DT0xVTU4gPSByZXF1ZXN0ZWRUYWJsZS5mb3JlaWduS2V5Q29sdW1uXG4gICAgICAgICAgICBNQVRDSEVSW0ZPUkVJR05fS0VZX0NPTFVNTl0gPSB7fVxuICAgICAgICAgICAgcmVsYXRpb25SZXN1bHRzW2luZGV4XS5mb3JFYWNoKFxuICAgICAgICAgICAgICAocmVsYXRpb25Sb3c6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IENVUlJFTlRfVkFMVUUgPSByZWxhdGlvblJvd1tyZXF1ZXN0ZWRUYWJsZS5rZXldXG4gICAgICAgICAgICAgICAgY29uc3QgVkFMVUVfVE9fRElTUExBWSA9IHJlbGF0aW9uUm93W3JlcXVlc3RlZFRhYmxlLmRpc3BsYXldXG4gICAgICAgICAgICAgICAgTUFUQ0hFUltGT1JFSUdOX0tFWV9DT0xVTU5dW0NVUlJFTlRfVkFMVUVdID0gVkFMVUVfVE9fRElTUExBWVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIHJldHVybiByZXN1bHRzLm1hcChcbiAgICAgICAgICAocm93OiBhbnkpID0+IHtcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXModG9SZXF1ZXN0KS5mb3JFYWNoKFxuICAgICAgICAgICAgICAocmVxdWVzdGVkVGFibGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBST1dfS0VZID0gcmVxdWVzdGVkVGFibGUuZm9yZWlnbktleUNvbHVtblxuICAgICAgICAgICAgICAgIHJvd1tST1dfS0VZXSA9IE1BVENIRVJbUk9XX0tFWV1bcm93W1JPV19LRVldXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gcm93XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSByZXF1aXJlbWVudHNDaGVjayhcbiAgICB0YWJsZUNvbmZpZzogSVRhYmxlSW5mbyxcbiAgICB1c2VyOiBJVXNlciB8IHVuZGVmaW5lZCxcbiAgICBkYkluc3RhbmNlOiBEYXRhYmFzZSxcbiAgICBuZXh0OiAocGFyYW0/OiBhbnkpID0+IHZvaWRcbiAgKSB7XG4gICAgaWYgKCFoYXNBdXRob3JpemF0aW9uKHRhYmxlQ29uZmlnLnJvbGVzLCB1c2VyKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBIdHRwRXhjZXB0aW9uKDQwMSwgJ05vdCBhdXRob3JpemVkJykpXG4gICAgfVxuICAgIGlmICghZGJJbnN0YW5jZS5kYikge1xuICAgICAgcmV0dXJuIGNhdGNoTWlkZGxld2FyZShuZXh0KShuZXcgSHR0cEV4Y2VwdGlvbig1MDAsICdObyBkYXRhYmFzZScpKVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRiSW5zdGFuY2UuZGIpXG4gIH1cblxuICBwcml2YXRlIGdldFJlbGF0aW9uUXVlcmllcyhUQUJMRV9DT05GSUc6IElUYWJsZUluZm8sIHBhcmVudElkOiBhbnkpIHtcbiAgICBjb25zdCByZWxhdGlvblF1ZXJpZXM6IEFycmF5PEJsdWViaXJkPHt9Pj4gPSBbXVxuICAgIGlmIChUQUJMRV9DT05GSUcucmVsYXRpb25zICYmIFRBQkxFX0NPTkZJRy5yZWxhdGlvbnMubWFueVRvT25lKSB7XG4gICAgICBjb25zdCBNQU5ZX1RPX09ORSA9IFRBQkxFX0NPTkZJRy5yZWxhdGlvbnMubWFueVRvT25lXG4gICAgICBjb25zdCBLRVlTOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKE1BTllfVE9fT05FKVxuICAgICAgS0VZUy5mb3JFYWNoKFxuICAgICAgICAodGFibGVOYW1lKSA9PiB7XG4gICAgICAgICAgcmVsYXRpb25RdWVyaWVzLnB1c2goXG4gICAgICAgICAgICB0aGlzLmdldFJlbGF0ZWRSb3coXG4gICAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgTUFOWV9UT19PTkVbdGFibGVOYW1lXSxcbiAgICAgICAgICAgICAgcGFyZW50SWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gcmVsYXRpb25RdWVyaWVzXG4gIH1cblxuICBwcml2YXRlIGdldFJlbGF0ZWRSb3codGFibGVOYW1lOiBzdHJpbmcsIGNvbHVtbk5hbWU6IHN0cmluZywgcGFyZW50SWQ6IGFueSkge1xuICAgIGlmICghZGF0YWJhc2UuZGIpIHtcbiAgICAgIHRocm93IG5ldyBIdHRwRXhjZXB0aW9uKDUwMCwgJ05vIGRhdGFiYXNlJylcbiAgICB9XG4gICAgY29uc3QgVEFCTEVfTkFNRSA9IHRhYmxlTmFtZVxuICAgIGNvbnN0IFRBQkxFX0NPTkZJRyA9IGdldFRhYmxlQ29uZmlnKFRBQkxFX05BTUUpXG5cbiAgICBjb25zdCByZXF1ZXN0ZWRDb2x1bW5zID0gZmlsdGVyVmlzaWJsZVRhYmxlQ29sdW1ucyhUQUJMRV9DT05GSUcsICdkZXRhaWwnKVxuICAgIHJldHVybiBkYXRhYmFzZS5kYi5zZWxlY3QocmVxdWVzdGVkQ29sdW1ucylcbiAgICAgIC5mcm9tKHRhYmxlTmFtZSlcbiAgICAgIC53aGVyZShjb2x1bW5OYW1lLCBwYXJlbnRJZCkudGhlbihcbiAgICAgICAgKHJlc3VsdHMpID0+ICh7XG4gICAgICAgICAgcmVzdWx0cyxcbiAgICAgICAgICB0YWJsZU5hbWUsXG4gICAgICAgIH0pXG4gICAgICApXG4gIH1cblxuICBwcml2YXRlIG1lcmdlUmVsYXRlZERhdGEoW3Jlc3VsdHMsIC4uLnJlbGF0aW9uc106IGFueSkge1xuICAgIGlmIChyZWxhdGlvbnMgJiYgcmVsYXRpb25zLmxlbmd0aCkge1xuICAgICAgcmVsYXRpb25zLmZvckVhY2goXG4gICAgICAgIChyZWxhdGlvbjoge3RhYmxlTmFtZTogc3RyaW5nLCByZXN1bHRzOiBhbnlbXX0pID0+IHtcbiAgICAgICAgICByZXN1bHRzW3JlbGF0aW9uLnRhYmxlTmFtZV0gPSByZWxhdGlvbi5yZXN1bHRzXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ29udHJvbGxlclxuIl19