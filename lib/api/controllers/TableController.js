"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _db = _interopRequireDefault(require("../db"));

var _types = require("../types");

var _utils = require("../utils");

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var debug = (0, _debug.default)('funfunzmc:controller-table');

function toRequestBuilder(relation, columnName) {
  return {
    values: new Set(),
    key: relation.key,
    display: relation.display,
    foreignKeyColumn: columnName
  };
}

var TableController =
/*#__PURE__*/
function () {
  function TableController() {
    _classCallCheck(this, TableController);

    debug('Created');
  }

  _createClass(TableController, [{
    key: "getTableConfig",
    value: function getTableConfig(req, res, next) {
      var TABLE_CONFIG = (0, _utils.getTableConfig)(req.params.table);
      var RESULT = {
        columns: TABLE_CONFIG.columns,
        name: TABLE_CONFIG.name,
        pk: TABLE_CONFIG.pk,
        verbose: TABLE_CONFIG.verbose,
        chips: TABLE_CONFIG.chips || [],
        itemTitle: TABLE_CONFIG.itemTitle
      };

      if (!(0, _utils.hasAuthorization)(TABLE_CONFIG.roles, req.user)) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(401, 'Not authorized'));
      }

      (0, _utils.addToResponse)(res, 'results')(RESULT);
      return (0, _utils.nextAndReturn)(next)(RESULT);
    }
  }, {
    key: "getTableData",
    value: function getTableData(req, res, next) {
      var _this = this;

      var PAGE_NUMBER = req.query.page || 0;
      var TABLE_NAME = req.params.table;
      var ORDER = req.query.order || null;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      var COLUMNS = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'main');
      var LIMIT = 10;

      if (!(0, _utils.hasAuthorization)(TABLE_CONFIG.roles, req.user)) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(401, 'Not authorized'));
      }

      if (!_db.default.db) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
      }

      var DB = _db.default.db;
      var QUERY = DB.select(COLUMNS).from(TABLE_NAME);

      if (req.query.filter) {
        QUERY = (0, _utils.applyQueryFilters)(QUERY, req.query.filter, TABLE_CONFIG);
      }

      if (req.query.search) {
        QUERY = (0, _utils.applyQuerySearch)(QUERY, req.query.search, TABLE_CONFIG);
      }

      if (ORDER) {
        var ORDER_OBJ = JSON.parse(ORDER);

        if (Array.isArray(ORDER_OBJ)) {
          QUERY.orderBy(ORDER_OBJ);
        } else {
          QUERY.orderBy(ORDER_OBJ.column, ORDER_OBJ.order);
        }
      }

      if (req.query.limit) {
        LIMIT = parseInt(req.query.limit, 10);
      }

      if (LIMIT > 0) {
        QUERY.offset(PAGE_NUMBER * LIMIT).limit(LIMIT);
      }

      return (0, _utils.runHook)(TABLE_CONFIG, 'getTableData', 'before', req, res, _db.default.db).then(function (hookResult) {
        if (hookResult) {
          if (hookResult.filter) {
            Object.keys(hookResult.filter).forEach(function (column) {
              if (Array.isArray(hookResult.filter[column])) {
                QUERY.whereIn(column, hookResult.filter[column]);
              }
            });
          }
        }

        return QUERY;
      }).then(function (results) {
        if (req.query.friendlyData) {
          return _this.addVerboseRelatedData(results, TABLE_CONFIG, DB);
        }

        return results;
      }).then(function (results) {
        return (0, _utils.runHook)(TABLE_CONFIG, 'getTableData', 'after', req, res, _db.default.db, results);
      }).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next));
    }
  }, {
    key: "getTableCount",
    value: function getTableCount(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        var QUERY = DB(TABLE_NAME).select('*');

        if (req.query.search) {
          QUERY = (0, _utils.applyQuerySearch)(QUERY, req.query.search, TABLE_CONFIG);
        }

        return Promise.all([DB, QUERY]);
      }).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            DB = _ref2[0],
            results = _ref2[1];

        return (0, _utils.runHook)(TABLE_CONFIG, 'getTableCount', 'after', req, res, DB, results);
      }).then((0, _utils.addToResponse)(res, 'count')).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "getRow",
    value: function getRow(req, res, next) {
      var _this2 = this;

      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        var requestedColumns = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'detail');
        return DB.select(requestedColumns).from("".concat(req.params.table)).where('id', req.params.id);
      }).then(function (results) {
        var relationQueries = [];

        if (req.query.includeRelations) {
          relationQueries = _this2.getRelationQueries(TABLE_CONFIG, results[0].id);
        }

        if (relationQueries.length) {
          return Promise.all([results[0]].concat(_toConsumableArray(relationQueries)));
        }

        return Promise.all([results[0]]);
      }).then(this.mergeRelatedData).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "insertRow",
    value: function insertRow(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        TABLE_CONFIG.columns.forEach(function (column) {
          if (column.type === 'datetime') {
            req.body.data[column.name] = new Date(req.body.data[column.name] || null);
          } else if (column.type === 'tinyint(1)') {
            req.body.data[column.name] = column.type ? 1 : 0;
          }
        });
        return DB(req.params.table).insert(req.body.data);
      }).then(function (results) {
        (0, _utils.addToResponse)(res, 'results')(results);
      }).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "updateRow",
    value: function updateRow(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        TABLE_CONFIG.columns.forEach(function (column) {
          if (column.type === 'datetime') {
            req.body.data[column.name] = new Date(req.body.data[column.name] || null);
          }
        });
        return DB(TABLE_NAME).where('id', req.params.id).update(req.body.data);
      }).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "deleteRow",
    value: function deleteRow(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      return this.requirementsCheck(TABLE_CONFIG, req.user, _db.default, next).then(function (DB) {
        return DB(TABLE_NAME).where('id', req.params.id).del();
      }).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next)).catch((0, _utils.catchMiddleware)(next));
    }
  }, {
    key: "addVerboseRelatedData",
    value: function addVerboseRelatedData(results, TABLE_CONFIG, DB) {
      var toRequest = {};
      var COLUMNS_WITH_RELATIONS = (0, _utils.getColumnsWithRelations)(TABLE_CONFIG);
      results.forEach(function (row, index) {
        COLUMNS_WITH_RELATIONS.forEach(function (column) {
          if (!column.relation) {
            throw new _types.HttpException(500, 'Column should have a relation');
          }

          var RELATION_TABLE_NAME = column.relation.table;

          if (!toRequest[RELATION_TABLE_NAME]) {
            toRequest[RELATION_TABLE_NAME] = toRequestBuilder(column.relation, column.name);
          }

          toRequest[RELATION_TABLE_NAME].values.add(row[column.name]);
        });
      });
      var relationQueries = [];
      Object.keys(toRequest).forEach(function (tableName) {
        relationQueries.push(DB.select(toRequest[tableName].display, toRequest[tableName].key).from(tableName).whereIn(toRequest[tableName].key, Array.from(toRequest[tableName].values.values())));
      });
      return Promise.all(relationQueries).then(function (relationResults) {
        var MATCHER = {};
        Object.values(toRequest).forEach(function (requestedTable, index) {
          var FOREIGN_KEY_COLUMN = requestedTable.foreignKeyColumn;
          MATCHER[FOREIGN_KEY_COLUMN] = {};
          relationResults[index].forEach(function (relationRow) {
            var CURRENT_VALUE = relationRow[requestedTable.key];
            var VALUE_TO_DISPLAY = relationRow[requestedTable.display];
            MATCHER[FOREIGN_KEY_COLUMN][CURRENT_VALUE] = VALUE_TO_DISPLAY;
          });
        });
        return results.map(function (row) {
          Object.values(toRequest).forEach(function (requestedTable) {
            var ROW_KEY = requestedTable.foreignKeyColumn;
            row[ROW_KEY] = MATCHER[ROW_KEY][row[ROW_KEY]];
          });
          return row;
        });
      });
    }
  }, {
    key: "requirementsCheck",
    value: function requirementsCheck(tableConfig, user, dbInstance, next) {
      if (!(0, _utils.hasAuthorization)(tableConfig.roles, user)) {
        return Promise.reject(new _types.HttpException(401, 'Not authorized'));
      }

      if (!dbInstance.db) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
      }

      return Promise.resolve(dbInstance.db);
    }
  }, {
    key: "getRelationQueries",
    value: function getRelationQueries(TABLE_CONFIG, parentId) {
      var _this3 = this;

      var relationQueries = [];

      if (TABLE_CONFIG.relations && TABLE_CONFIG.relations.manyToOne) {
        var MANY_TO_ONE = TABLE_CONFIG.relations.manyToOne;
        var KEYS = Object.keys(MANY_TO_ONE);
        KEYS.forEach(function (tableName) {
          relationQueries.push(_this3.getRelatedRow(tableName, MANY_TO_ONE[tableName], parentId));
        });
      }

      return relationQueries;
    }
  }, {
    key: "getRelatedRow",
    value: function getRelatedRow(tableName, columnName, parentId) {
      if (!_db.default.db) {
        throw new _types.HttpException(500, 'No database');
      }

      var TABLE_NAME = tableName;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      var requestedColumns = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'detail').filter(function (column) {
        return column !== columnName;
      });
      return _db.default.db.select(requestedColumns).from(tableName).where(columnName, parentId).then(function (results) {
        return {
          results: results,
          tableName: tableName
        };
      });
    }
  }, {
    key: "mergeRelatedData",
    value: function mergeRelatedData(_ref3) {
      var _ref4 = _toArray(_ref3),
          results = _ref4[0],
          relations = _ref4.slice(1);

      if (relations && relations.length) {
        relations.forEach(function (relation) {
          results[relation.tableName] = relation.results;
        });
      }

      return results;
    }
  }]);

  return TableController;
}();

var _default = TableController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,