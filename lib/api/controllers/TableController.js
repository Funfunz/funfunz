"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _db = _interopRequireDefault(require("../db"));

var _types = require("../types");

var _utils = require("../utils");

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var debug = (0, _debug.default)('funfunzmc:controller-table');

var TableController =
/*#__PURE__*/
function () {
  function TableController() {
    _classCallCheck(this, TableController);

    debug('Created');
  }

  _createClass(TableController, [{
    key: "getTableConfig",
    value: function getTableConfig(req, res, next) {
      var TABLE_CONFIG = (0, _utils.getTableConfig)(req.params.table);
      var RESULT = {
        columns: TABLE_CONFIG.columns,
        name: TABLE_CONFIG.name,
        pk: TABLE_CONFIG.pk,
        verbose: TABLE_CONFIG.verbose
      };

      if ((0, _utils.hasAuthorization)(TABLE_CONFIG.roles, req.user)) {
        (0, _utils.addToResponse)(res, 'results')(RESULT);
        return (0, _utils.nextAndReturn)(next)(RESULT);
      } else {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(401, 'Not authorized'));
      }
    }
  }, {
    key: "getTableData",
    value: function getTableData(req, res, next) {
      var PAGE_NUMBER = req.query.page || 0;
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      var COLUMNS = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'main');
      var LIMIT = 10;

      if (req.query.limit) {
        LIMIT = parseInt(req.query.limit, 10);
      }

      if (!(0, _utils.hasAuthorization)(TABLE_CONFIG.roles, req.user)) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(401, 'Not authorized'));
      }

      if (!_db.default.db) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
      }

      var DB = _db.default.db;
      var QUERY = DB.select(COLUMNS).from(TABLE_NAME);

      if (req.query.filter) {
        QUERY = (0, _utils.applyQueryFilters)(QUERY, req.query.filter, TABLE_CONFIG);
      }

      return QUERY.offset(PAGE_NUMBER * LIMIT).limit(LIMIT).then(function (results) {
        var toRequest = {};
        var COLUMNS_WITH_RELATIONS = TABLE_CONFIG.columns.filter(function (column) {
          return column.relation;
        });
        results.forEach(function (row, index) {
          COLUMNS_WITH_RELATIONS.forEach(function (column) {
            if (!column.relation) {
              throw new _types.HttpException(500, 'Column should have a relation');
            }

            var RELATION = column.relation;
            var RELATION_TABLE_NAME = RELATION.table;
            var ROW_RELATION_VALUE = row[column.name];

            if (!toRequest[RELATION_TABLE_NAME]) {
              toRequest[RELATION_TABLE_NAME] = {
                values: {},
                key: RELATION.key,
                display: RELATION.display,
                foreignKeyColumn: column.name
              };
            }

            if (toRequest[RELATION_TABLE_NAME].values[ROW_RELATION_VALUE] === undefined) {
              toRequest[RELATION_TABLE_NAME].values = _objectSpread({}, toRequest[RELATION_TABLE_NAME].values, _defineProperty({}, ROW_RELATION_VALUE, index));
            }
          });
        });
        var relationQueries = [];
        Object.keys(toRequest).forEach(function (tableName) {
          relationQueries.push(DB.select(toRequest[tableName].display, toRequest[tableName].key).from(tableName).whereIn(toRequest[tableName].key, Object.keys(toRequest[tableName].values)));
        });
        return Promise.all([results, toRequest, Promise.all(relationQueries)]);
      }).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3),
            results = _ref2[0],
            toRequest = _ref2[1],
            relationResults = _ref2[2];

        var MATCHER = {};
        Object.values(toRequest).forEach(function (requestedTable, index) {
          var FOREIGN_KEY_COLUMN = requestedTable.foreignKeyColumn;
          MATCHER[FOREIGN_KEY_COLUMN] = {};
          relationResults[index].forEach(function (relationRow) {
            var CURRENT_VALUE = relationRow[requestedTable.key];
            var VALUE_TO_DISPLAY = relationRow[requestedTable.display];
            MATCHER[FOREIGN_KEY_COLUMN][CURRENT_VALUE] = VALUE_TO_DISPLAY;
          });
        });
        return results.map(function (row) {
          Object.values(toRequest).forEach(function (requestedTable) {
            var ROW_KEY = requestedTable.foreignKeyColumn;
            row[ROW_KEY] = MATCHER[ROW_KEY][row[ROW_KEY]];
          });
          return row;
        });
      }).then(function (results) {
        return (0, _utils.runHook)(TABLE_CONFIG, 'getTableData', 'after', req, res, _db.default.db, results);
      }).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next));
    }
  }, {
    key: "getTableCount",
    value: function getTableCount(req, res, next) {
      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);

      if (!(0, _utils.hasAuthorization)(TABLE_CONFIG.roles, req.user)) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(401, 'Not authorized'));
      } else {
        if (!_db.default.db) {
          return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
        } else {
          return _db.default.db.select('*').from(TABLE_NAME).then(function (results) {
            (0, _utils.runHook)(TABLE_CONFIG, 'getTableCount', 'after', req, res, _db.default.db, results).then((0, _utils.addToResponse)(res, 'count')).then((0, _utils.nextAndReturn)(next));
          });
        }
      }
    }
  }, {
    key: "getRow",
    value: function getRow(req, res, next) {
      var _this = this;

      var TABLE_NAME = req.params.table;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);

      if (!(0, _utils.hasAuthorization)(TABLE_CONFIG.roles, req.user)) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(401, 'Not authorized'));
      } else {
        if (!_db.default.db) {
          return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
        } else {
          var requestedColumns = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'detail');

          var query = _db.default.db.select(requestedColumns).from("".concat(req.params.table)).where("id", req.params.id);

          return query.then(function (results) {
            var relationQueries = [];

            if (req.query.includeRelations) {
              relationQueries = _this.getRelationQueries(TABLE_CONFIG, results[0].id);
            }

            if (relationQueries.length) {
              return Promise.all([results[0]].concat(_toConsumableArray(relationQueries)));
            }

            return Promise.all([results[0]]);
          }).then(this.mergeRelatedData).then((0, _utils.addToResponse)(res, 'result')).then((0, _utils.nextAndReturn)(next));
        }
      }
    }
  }, {
    key: "insertRow",
    value: function insertRow(req, res, next) {
      if (!_db.default.db) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
      } else {
        return _db.default.db(req.params.table).insert(req.body.data).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next));
      }
    }
  }, {
    key: "updateRow",
    value: function updateRow(req, res, next) {
      if (!_db.default.db) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
      } else {
        return _db.default.db(req.body.table).where('id', req.body.id).update(req.body.data).then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next));
      }
    }
  }, {
    key: "deleteRow",
    value: function deleteRow(req, res, next) {
      if (!_db.default.db) {
        return (0, _utils.catchMiddleware)(next)(new _types.HttpException(500, 'No database'));
      } else {
        return _db.default.db(req.params.table).where('id', req.params.id).del().then((0, _utils.addToResponse)(res, 'results')).then((0, _utils.nextAndReturn)(next));
      }
    }
  }, {
    key: "getRelationQueries",
    value: function getRelationQueries(TABLE_CONFIG, parentId) {
      var _this2 = this;

      var relationQueries = [];

      if (TABLE_CONFIG.relations && TABLE_CONFIG.relations.manyToOne) {
        var MANY_TO_ONE = TABLE_CONFIG.relations.manyToOne;
        var KEYS = Object.keys(MANY_TO_ONE);
        KEYS.forEach(function (tableName) {
          relationQueries.push(_this2.getRelatedRow(tableName, MANY_TO_ONE[tableName], parentId));
        });
      }

      return relationQueries;
    }
  }, {
    key: "getRelatedRow",
    value: function getRelatedRow(tableName, columnName, parentId) {
      if (!_db.default.db) {
        throw new _types.HttpException(500, 'No database');
      }

      var TABLE_NAME = tableName;
      var TABLE_CONFIG = (0, _utils.getTableConfig)(TABLE_NAME);
      var requestedColumns = (0, _utils.filterVisibleTableColumns)(TABLE_CONFIG, 'detail');
      return _db.default.db.select(requestedColumns).from(tableName).where(columnName, parentId).then(function (results) {
        return {
          results: results,
          tableName: tableName
        };
      });
    }
  }, {
    key: "mergeRelatedData",
    value: function mergeRelatedData(_ref3) {
      var _ref4 = _toArray(_ref3),
          results = _ref4[0],
          relations = _ref4.slice(1);

      if (relations && relations.length) {
        relations.forEach(function (relation) {
          results[relation.tableName] = relation.results;
        });
      }

      return results;
    }
  }]);

  return TableController;
}();

var _default = TableController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,