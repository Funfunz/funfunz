"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setConfig = setConfig;
exports.default = _default;

var _configSchema = _interopRequireDefault(require("./configSchema"));

var _settingsSchema = _interopRequireDefault(require("./settingsSchema"));

var _jsonschema = require("jsonschema");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var config = {
  settings: [],
  config: {}
  /**
   * Normalize a port into a number, string, or false.
   */

};

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function setConfig(configs, target) {
  if (configCheck(configs, target)) {
    if (config.server && config.server.port) {
      config.server.port = normalizePort(config.server.port);
    }

    config[target] = configs;
  }
}

function configCheck(configs, target) {
  var validator = new _jsonschema.Validator();

  if (!configs && configs !== false) {
    throw new Error('Configuration is missing');
  }

  if (target === 'settings') {
    var validation = validator.validate(configs, _settingsSchema.default);

    if (validation.errors.length > 0) {
      throw new Error(validation.errors.toString());
    }
  }

  if (target === 'config') {
    var _validation = validator.validate(configs, _configSchema.default);

    if (_validation.errors.length > 0) {
      throw new Error(_validation.errors.toString());
    }
  }

  return true;
}

function _default() {
  return config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdXRpbHMvY29uZmlnTG9hZGVyLnRzIl0sIm5hbWVzIjpbImNvbmZpZyIsInNldHRpbmdzIiwibm9ybWFsaXplUG9ydCIsInZhbCIsInBvcnQiLCJwYXJzZUludCIsImlzTmFOIiwic2V0Q29uZmlnIiwiY29uZmlncyIsInRhcmdldCIsImNvbmZpZ0NoZWNrIiwic2VydmVyIiwidmFsaWRhdG9yIiwiVmFsaWRhdG9yIiwiRXJyb3IiLCJ2YWxpZGF0aW9uIiwidmFsaWRhdGUiLCJzZXR0aW5nc1NjaGVtYSIsImVycm9ycyIsImxlbmd0aCIsInRvU3RyaW5nIiwiY29uZmlnU2NoZW1hIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOztBQUVBOzs7O0FBRUEsSUFBTUEsTUFJTCxHQUFHO0FBQ0ZDLEVBQUFBLFFBQVEsRUFBRSxFQURSO0FBRUZELEVBQUFBLE1BQU0sRUFBRTtBQUdWOzs7O0FBTEksQ0FKSjs7QUFZQSxTQUFTRSxhQUFULENBQXVCQyxHQUF2QixFQUFvQztBQUNsQyxNQUFNQyxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0YsR0FBRCxFQUFNLEVBQU4sQ0FBckI7O0FBRUEsTUFBSUcsS0FBSyxDQUFDRixJQUFELENBQVQsRUFBaUI7QUFDZjtBQUNBLFdBQU9ELEdBQVA7QUFDRDs7QUFFRCxNQUFJQyxJQUFJLElBQUksQ0FBWixFQUFlO0FBQ2I7QUFDQSxXQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBTyxLQUFQO0FBQ0Q7O0FBRU0sU0FBU0csU0FBVCxDQUFtQkMsT0FBbkIsRUFBaUNDLE1BQWpDLEVBQWlEO0FBQ3RELE1BQUlDLFdBQVcsQ0FBQ0YsT0FBRCxFQUFVQyxNQUFWLENBQWYsRUFBa0M7QUFDaEMsUUFBSVQsTUFBTSxDQUFDVyxNQUFQLElBQWlCWCxNQUFNLENBQUNXLE1BQVAsQ0FBY1AsSUFBbkMsRUFBeUM7QUFDdkNKLE1BQUFBLE1BQU0sQ0FBQ1csTUFBUCxDQUFjUCxJQUFkLEdBQXFCRixhQUFhLENBQUNGLE1BQU0sQ0FBQ1csTUFBUCxDQUFjUCxJQUFmLENBQWxDO0FBQ0Q7O0FBQ0RKLElBQUFBLE1BQU0sQ0FBQ1MsTUFBRCxDQUFOLEdBQWlCRCxPQUFqQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0UsV0FBVCxDQUFxQkYsT0FBckIsRUFBbUNDLE1BQW5DLEVBQW1EO0FBQ2pELE1BQU1HLFNBQVMsR0FBRyxJQUFJQyxxQkFBSixFQUFsQjs7QUFFQSxNQUFJLENBQUNMLE9BQUQsSUFBWUEsT0FBTyxLQUFLLEtBQTVCLEVBQW1DO0FBQ2pDLFVBQU0sSUFBSU0sS0FBSixDQUFVLDBCQUFWLENBQU47QUFDRDs7QUFDRCxNQUFJTCxNQUFNLEtBQUssVUFBZixFQUEyQjtBQUN6QixRQUFNTSxVQUFVLEdBQUdILFNBQVMsQ0FBQ0ksUUFBVixDQUFtQlIsT0FBbkIsRUFBNEJTLHVCQUE1QixDQUFuQjs7QUFDQSxRQUFJRixVQUFVLENBQUNHLE1BQVgsQ0FBa0JDLE1BQWxCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ2hDLFlBQU0sSUFBSUwsS0FBSixDQUFVQyxVQUFVLENBQUNHLE1BQVgsQ0FBa0JFLFFBQWxCLEVBQVYsQ0FBTjtBQUNEO0FBQ0Y7O0FBQ0QsTUFBSVgsTUFBTSxLQUFLLFFBQWYsRUFBeUI7QUFDdkIsUUFBTU0sV0FBVSxHQUFHSCxTQUFTLENBQUNJLFFBQVYsQ0FBbUJSLE9BQW5CLEVBQTRCYSxxQkFBNUIsQ0FBbkI7O0FBQ0EsUUFBSU4sV0FBVSxDQUFDRyxNQUFYLENBQWtCQyxNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUNoQyxZQUFNLElBQUlMLEtBQUosQ0FBVUMsV0FBVSxDQUFDRyxNQUFYLENBQWtCRSxRQUFsQixFQUFWLENBQU47QUFDRDtBQUNGOztBQUNELFNBQU8sSUFBUDtBQUNEOztBQUVjLG9CQUFXO0FBQ3hCLFNBQU9wQixNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnU2NoZW1hIGZyb20gJ0Byb290L2FwaS91dGlscy9jb25maWdTY2hlbWEnXG5pbXBvcnQgc2V0dGluZ3NTY2hlbWEgZnJvbSAnQHJvb3QvYXBpL3V0aWxzL3NldHRpbmdzU2NoZW1hJ1xuaW1wb3J0IHsgSVRhYmxlSW5mbyB9IGZyb20gJ0Byb290L2NvbmZpZ0dlbmVyYXRvcidcbmltcG9ydCB7IFZhbGlkYXRvciB9IGZyb20gJ2pzb25zY2hlbWEnXG5cbmNvbnN0IGNvbmZpZzoge1xuICBzZXR0aW5nczogSVRhYmxlSW5mb1tdLFxuICBjb25maWc6IGFueSxcbiAgW2tleTogc3RyaW5nXTogYW55LFxufSA9IHtcbiAgc2V0dGluZ3M6IFtdLFxuICBjb25maWc6IHt9LFxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHBvcnQgaW50byBhIG51bWJlciwgc3RyaW5nLCBvciBmYWxzZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUG9ydCh2YWw6IHN0cmluZykge1xuICBjb25zdCBwb3J0ID0gcGFyc2VJbnQodmFsLCAxMClcblxuICBpZiAoaXNOYU4ocG9ydCkpIHtcbiAgICAvLyBuYW1lZCBwaXBlXG4gICAgcmV0dXJuIHZhbFxuICB9XG5cbiAgaWYgKHBvcnQgPj0gMCkge1xuICAgIC8vIHBvcnQgbnVtYmVyXG4gICAgcmV0dXJuIHBvcnRcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29uZmlnKGNvbmZpZ3M6IGFueSwgdGFyZ2V0OiBzdHJpbmcpIHtcbiAgaWYgKGNvbmZpZ0NoZWNrKGNvbmZpZ3MsIHRhcmdldCkpIHtcbiAgICBpZiAoY29uZmlnLnNlcnZlciAmJiBjb25maWcuc2VydmVyLnBvcnQpIHtcbiAgICAgIGNvbmZpZy5zZXJ2ZXIucG9ydCA9IG5vcm1hbGl6ZVBvcnQoY29uZmlnLnNlcnZlci5wb3J0KVxuICAgIH1cbiAgICBjb25maWdbdGFyZ2V0XSA9IGNvbmZpZ3NcbiAgfVxufVxuXG5mdW5jdGlvbiBjb25maWdDaGVjayhjb25maWdzOiBhbnksIHRhcmdldDogc3RyaW5nKSB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IoKTtcblxuICBpZiAoIWNvbmZpZ3MgJiYgY29uZmlncyAhPT0gZmFsc2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpZ3VyYXRpb24gaXMgbWlzc2luZycpXG4gIH1cbiAgaWYgKHRhcmdldCA9PT0gJ3NldHRpbmdzJykge1xuICAgIGNvbnN0IHZhbGlkYXRpb24gPSB2YWxpZGF0b3IudmFsaWRhdGUoY29uZmlncywgc2V0dGluZ3NTY2hlbWEpXG4gICAgaWYgKHZhbGlkYXRpb24uZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih2YWxpZGF0aW9uLmVycm9ycy50b1N0cmluZygpKVxuICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0ID09PSAnY29uZmlnJykge1xuICAgIGNvbnN0IHZhbGlkYXRpb24gPSB2YWxpZGF0b3IudmFsaWRhdGUoY29uZmlncywgY29uZmlnU2NoZW1hKVxuICAgIGlmICh2YWxpZGF0aW9uLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IodmFsaWRhdGlvbi5lcnJvcnMudG9TdHJpbmcoKSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25maWdcbn1cbiJdfQ==