"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setConfig = setConfig;
exports.default = _default;

var _configSchema = _interopRequireDefault(require("./configSchema"));

var _settingsSchema = _interopRequireDefault(require("./settingsSchema"));

var _jsonschema = require("jsonschema");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var config = {
  settings: [],
  config: {}
  /**
   * Normalize a port into a number, string, or false.
   */

};

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function setConfig(configs, target) {
  if (configCheck(configs, target)) {
    if (config.server && config.server.port) {
      config.server.port = normalizePort(config.server.port);
    }

    config[target] = configs;
  }
}

function configCheck(configs, target) {
  var validator = new _jsonschema.Validator();

  if (!configs) {
    throw new Error('Configuration is missing');
  }

  if (target === 'settings') {
    var validation = validator.validate(configs, _settingsSchema.default);

    if (validation.errors.length > 0) {
      throw new Error(validation.errors.toString());
    }
  }

  if (target === 'config') {
    var _validation = validator.validate(configs, _configSchema.default);

    if (_validation.errors.length > 0) {
      throw new Error(_validation.errors.toString());
    }
  }

  return true;
}

function _default() {
  return config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdXRpbHMvY29uZmlnTG9hZGVyLnRzIl0sIm5hbWVzIjpbImNvbmZpZyIsInNldHRpbmdzIiwibm9ybWFsaXplUG9ydCIsInZhbCIsInBvcnQiLCJwYXJzZUludCIsImlzTmFOIiwic2V0Q29uZmlnIiwiY29uZmlncyIsInRhcmdldCIsImNvbmZpZ0NoZWNrIiwic2VydmVyIiwidmFsaWRhdG9yIiwiVmFsaWRhdG9yIiwiRXJyb3IiLCJ2YWxpZGF0aW9uIiwidmFsaWRhdGUiLCJzZXR0aW5nc1NjaGVtYSIsImVycm9ycyIsImxlbmd0aCIsInRvU3RyaW5nIiwiY29uZmlnU2NoZW1hIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsTUFJTCxHQUFHO0FBQ0ZDLEVBQUFBLFFBQVEsRUFBRSxFQURSO0FBRUZELEVBQUFBLE1BQU0sRUFBRTtBQUdWOzs7O0FBTEksQ0FKSjs7QUFZQSxTQUFTRSxhQUFULENBQXVCQyxHQUF2QixFQUFvQztBQUNsQyxNQUFNQyxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0YsR0FBRCxFQUFNLEVBQU4sQ0FBckI7O0FBRUEsTUFBSUcsS0FBSyxDQUFDRixJQUFELENBQVQsRUFBaUI7QUFDZjtBQUNBLFdBQU9ELEdBQVA7QUFDRDs7QUFFRCxNQUFJQyxJQUFJLElBQUksQ0FBWixFQUFlO0FBQ2I7QUFDQSxXQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBTyxLQUFQO0FBQ0Q7O0FBRU0sU0FBU0csU0FBVCxDQUFtQkMsT0FBbkIsRUFBaUNDLE1BQWpDLEVBQWlEO0FBQ3RELE1BQUlDLFdBQVcsQ0FBQ0YsT0FBRCxFQUFVQyxNQUFWLENBQWYsRUFBa0M7QUFDaEMsUUFBSVQsTUFBTSxDQUFDVyxNQUFQLElBQWlCWCxNQUFNLENBQUNXLE1BQVAsQ0FBY1AsSUFBbkMsRUFBeUM7QUFDdkNKLE1BQUFBLE1BQU0sQ0FBQ1csTUFBUCxDQUFjUCxJQUFkLEdBQXFCRixhQUFhLENBQUNGLE1BQU0sQ0FBQ1csTUFBUCxDQUFjUCxJQUFmLENBQWxDO0FBQ0Q7O0FBQ0RKLElBQUFBLE1BQU0sQ0FBQ1MsTUFBRCxDQUFOLEdBQWlCRCxPQUFqQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0UsV0FBVCxDQUFxQkYsT0FBckIsRUFBbUNDLE1BQW5DLEVBQW1EO0FBQ2pELE1BQU1HLFNBQVMsR0FBRyxJQUFJQyxxQkFBSixFQUFsQjs7QUFFQSxNQUFJLENBQUNMLE9BQUwsRUFBYztBQUNaLFVBQU0sSUFBSU0sS0FBSixDQUFVLDBCQUFWLENBQU47QUFDRDs7QUFDRCxNQUFJTCxNQUFNLEtBQUssVUFBZixFQUEyQjtBQUN6QixRQUFNTSxVQUFVLEdBQUdILFNBQVMsQ0FBQ0ksUUFBVixDQUFtQlIsT0FBbkIsRUFBNEJTLHVCQUE1QixDQUFuQjs7QUFDQSxRQUFJRixVQUFVLENBQUNHLE1BQVgsQ0FBa0JDLE1BQWxCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ2hDLFlBQU0sSUFBSUwsS0FBSixDQUFVQyxVQUFVLENBQUNHLE1BQVgsQ0FBa0JFLFFBQWxCLEVBQVYsQ0FBTjtBQUNEO0FBQ0Y7O0FBQ0QsTUFBSVgsTUFBTSxLQUFLLFFBQWYsRUFBeUI7QUFDdkIsUUFBTU0sV0FBVSxHQUFHSCxTQUFTLENBQUNJLFFBQVYsQ0FBbUJSLE9BQW5CLEVBQTRCYSxxQkFBNUIsQ0FBbkI7O0FBQ0EsUUFBSU4sV0FBVSxDQUFDRyxNQUFYLENBQWtCQyxNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUNoQyxZQUFNLElBQUlMLEtBQUosQ0FBVUMsV0FBVSxDQUFDRyxNQUFYLENBQWtCRSxRQUFsQixFQUFWLENBQU47QUFDRDtBQUNGOztBQUNELFNBQU8sSUFBUDtBQUNEOztBQUVjLG9CQUFXO0FBQ3hCLFNBQU9wQixNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnU2NoZW1hIGZyb20gJ0Byb290L2FwaS91dGlscy9jb25maWdTY2hlbWEnXG5pbXBvcnQgc2V0dGluZ3NTY2hlbWEgZnJvbSAnQHJvb3QvYXBpL3V0aWxzL3NldHRpbmdzU2NoZW1hJ1xuaW1wb3J0IHsgVmFsaWRhdG9yIH0gZnJvbSAnanNvbnNjaGVtYSdcblxuY29uc3QgY29uZmlnOiB7XG4gIHNldHRpbmdzOiBhbnlbXSxcbiAgY29uZmlnOiBhbnksXG4gIFtrZXk6IHN0cmluZ106IGFueSxcbn0gPSB7XG4gIHNldHRpbmdzOiBbXSxcbiAgY29uZmlnOiB7fSxcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSBwb3J0IGludG8gYSBudW1iZXIsIHN0cmluZywgb3IgZmFsc2UuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBvcnQodmFsOiBzdHJpbmcpIHtcbiAgY29uc3QgcG9ydCA9IHBhcnNlSW50KHZhbCwgMTApXG5cbiAgaWYgKGlzTmFOKHBvcnQpKSB7XG4gICAgLy8gbmFtZWQgcGlwZVxuICAgIHJldHVybiB2YWxcbiAgfVxuXG4gIGlmIChwb3J0ID49IDApIHtcbiAgICAvLyBwb3J0IG51bWJlclxuICAgIHJldHVybiBwb3J0XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbmZpZyhjb25maWdzOiBhbnksIHRhcmdldDogc3RyaW5nKSB7XG4gIGlmIChjb25maWdDaGVjayhjb25maWdzLCB0YXJnZXQpKSB7XG4gICAgaWYgKGNvbmZpZy5zZXJ2ZXIgJiYgY29uZmlnLnNlcnZlci5wb3J0KSB7XG4gICAgICBjb25maWcuc2VydmVyLnBvcnQgPSBub3JtYWxpemVQb3J0KGNvbmZpZy5zZXJ2ZXIucG9ydClcbiAgICB9XG4gICAgY29uZmlnW3RhcmdldF0gPSBjb25maWdzXG4gIH1cbn1cblxuZnVuY3Rpb24gY29uZmlnQ2hlY2soY29uZmlnczogYW55LCB0YXJnZXQ6IHN0cmluZykge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKCk7XG5cbiAgaWYgKCFjb25maWdzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb25maWd1cmF0aW9uIGlzIG1pc3NpbmcnKVxuICB9XG4gIGlmICh0YXJnZXQgPT09ICdzZXR0aW5ncycpIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdG9yLnZhbGlkYXRlKGNvbmZpZ3MsIHNldHRpbmdzU2NoZW1hKVxuICAgIGlmICh2YWxpZGF0aW9uLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IodmFsaWRhdGlvbi5lcnJvcnMudG9TdHJpbmcoKSlcbiAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCA9PT0gJ2NvbmZpZycpIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdG9yLnZhbGlkYXRlKGNvbmZpZ3MsIGNvbmZpZ1NjaGVtYSlcbiAgICBpZiAodmFsaWRhdGlvbi5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHZhbGlkYXRpb24uZXJyb3JzLnRvU3RyaW5nKCkpXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uZmlnXG59XG4iXX0=