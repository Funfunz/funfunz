"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setConfig = setConfig;
exports.default = _default;

var _configSchema = _interopRequireDefault(require("./configSchema"));

var _settingsSchema = _interopRequireDefault(require("./settingsSchema"));

var _jsonschema = require("jsonschema");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var config = {
  settings: [],
  config: {}
  /**
   * Normalize a port into a number, string, or false.
   */

};

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function setConfig(configs, target) {
  if (configCheck(configs, target)) {
    if (config.server && config.server.port) {
      config.server.port = normalizePort(config.server.port);
    }

    config[target] = configs;
  }
}

function configCheck(configs, target) {
  var validator = new _jsonschema.Validator();

  if (!configs) {
    throw new Error('Configuration is missing');
  }

  if (target === 'settings') {
    var validation = validator.validate(configs, _settingsSchema.default);

    if (validation.errors.length > 0) {
      console.log(validation.errors);
      throw new Error(validation.errors.toString());
    }
  }

  if (target === 'config') {
    var _validation = validator.validate(configs, _configSchema.default);

    if (_validation.errors.length > 0) {
      throw new Error(_validation.errors.toString());
    }
  }

  return true;
}

function _default() {
  return config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdXRpbHMvY29uZmlnTG9hZGVyLnRzIl0sIm5hbWVzIjpbImNvbmZpZyIsInNldHRpbmdzIiwibm9ybWFsaXplUG9ydCIsInZhbCIsInBvcnQiLCJwYXJzZUludCIsImlzTmFOIiwic2V0Q29uZmlnIiwiY29uZmlncyIsInRhcmdldCIsImNvbmZpZ0NoZWNrIiwic2VydmVyIiwidmFsaWRhdG9yIiwiVmFsaWRhdG9yIiwiRXJyb3IiLCJ2YWxpZGF0aW9uIiwidmFsaWRhdGUiLCJzZXR0aW5nc1NjaGVtYSIsImVycm9ycyIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJ0b1N0cmluZyIsImNvbmZpZ1NjaGVtYSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBLElBQU1BLE1BSUwsR0FBRztBQUNGQyxFQUFBQSxRQUFRLEVBQUUsRUFEUjtBQUVGRCxFQUFBQSxNQUFNLEVBQUU7QUFHVjs7OztBQUxJLENBSko7O0FBWUEsU0FBU0UsYUFBVCxDQUF1QkMsR0FBdkIsRUFBb0M7QUFDbEMsTUFBTUMsSUFBSSxHQUFHQyxRQUFRLENBQUNGLEdBQUQsRUFBTSxFQUFOLENBQXJCOztBQUVBLE1BQUlHLEtBQUssQ0FBQ0YsSUFBRCxDQUFULEVBQWlCO0FBQ2Y7QUFDQSxXQUFPRCxHQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsSUFBSSxJQUFJLENBQVosRUFBZTtBQUNiO0FBQ0EsV0FBT0EsSUFBUDtBQUNEOztBQUVELFNBQU8sS0FBUDtBQUNEOztBQUVNLFNBQVNHLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQWlDQyxNQUFqQyxFQUFpRDtBQUN0RCxNQUFJQyxXQUFXLENBQUNGLE9BQUQsRUFBVUMsTUFBVixDQUFmLEVBQWtDO0FBQ2hDLFFBQUlULE1BQU0sQ0FBQ1csTUFBUCxJQUFpQlgsTUFBTSxDQUFDVyxNQUFQLENBQWNQLElBQW5DLEVBQXlDO0FBQ3ZDSixNQUFBQSxNQUFNLENBQUNXLE1BQVAsQ0FBY1AsSUFBZCxHQUFxQkYsYUFBYSxDQUFDRixNQUFNLENBQUNXLE1BQVAsQ0FBY1AsSUFBZixDQUFsQztBQUNEOztBQUNESixJQUFBQSxNQUFNLENBQUNTLE1BQUQsQ0FBTixHQUFpQkQsT0FBakI7QUFDRDtBQUNGOztBQUVELFNBQVNFLFdBQVQsQ0FBcUJGLE9BQXJCLEVBQW1DQyxNQUFuQyxFQUFtRDtBQUNqRCxNQUFNRyxTQUFTLEdBQUcsSUFBSUMscUJBQUosRUFBbEI7O0FBRUEsTUFBSSxDQUFDTCxPQUFMLEVBQWM7QUFDWixVQUFNLElBQUlNLEtBQUosQ0FBVSwwQkFBVixDQUFOO0FBQ0Q7O0FBQ0QsTUFBSUwsTUFBTSxLQUFLLFVBQWYsRUFBMkI7QUFDekIsUUFBTU0sVUFBVSxHQUFHSCxTQUFTLENBQUNJLFFBQVYsQ0FBbUJSLE9BQW5CLEVBQTRCUyx1QkFBNUIsQ0FBbkI7O0FBQ0EsUUFBSUYsVUFBVSxDQUFDRyxNQUFYLENBQWtCQyxNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUNoQ0MsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlOLFVBQVUsQ0FBQ0csTUFBdkI7QUFDQSxZQUFNLElBQUlKLEtBQUosQ0FBVUMsVUFBVSxDQUFDRyxNQUFYLENBQWtCSSxRQUFsQixFQUFWLENBQU47QUFDRDtBQUNGOztBQUNELE1BQUliLE1BQU0sS0FBSyxRQUFmLEVBQXlCO0FBQ3ZCLFFBQU1NLFdBQVUsR0FBR0gsU0FBUyxDQUFDSSxRQUFWLENBQW1CUixPQUFuQixFQUE0QmUscUJBQTVCLENBQW5COztBQUNBLFFBQUlSLFdBQVUsQ0FBQ0csTUFBWCxDQUFrQkMsTUFBbEIsR0FBMkIsQ0FBL0IsRUFBa0M7QUFDaEMsWUFBTSxJQUFJTCxLQUFKLENBQVVDLFdBQVUsQ0FBQ0csTUFBWCxDQUFrQkksUUFBbEIsRUFBVixDQUFOO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPLElBQVA7QUFDRDs7QUFFYyxvQkFBVztBQUN4QixTQUFPdEIsTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZ1NjaGVtYSBmcm9tICdAcm9vdC9hcGkvdXRpbHMvY29uZmlnU2NoZW1hJ1xuaW1wb3J0IHNldHRpbmdzU2NoZW1hIGZyb20gJ0Byb290L2FwaS91dGlscy9zZXR0aW5nc1NjaGVtYSdcbmltcG9ydCB7IFZhbGlkYXRvciB9IGZyb20gJ2pzb25zY2hlbWEnXG5cbmNvbnN0IGNvbmZpZzoge1xuICBzZXR0aW5nczogYW55W10sXG4gIGNvbmZpZzogYW55LFxuICBba2V5OiBzdHJpbmddOiBhbnksXG59ID0ge1xuICBzZXR0aW5nczogW10sXG4gIGNvbmZpZzoge30sXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgcG9ydCBpbnRvIGEgbnVtYmVyLCBzdHJpbmcsIG9yIGZhbHNlLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQb3J0KHZhbDogc3RyaW5nKSB7XG4gIGNvbnN0IHBvcnQgPSBwYXJzZUludCh2YWwsIDEwKVxuXG4gIGlmIChpc05hTihwb3J0KSkge1xuICAgIC8vIG5hbWVkIHBpcGVcbiAgICByZXR1cm4gdmFsXG4gIH1cblxuICBpZiAocG9ydCA+PSAwKSB7XG4gICAgLy8gcG9ydCBudW1iZXJcbiAgICByZXR1cm4gcG9ydFxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb25maWcoY29uZmlnczogYW55LCB0YXJnZXQ6IHN0cmluZykge1xuICBpZiAoY29uZmlnQ2hlY2soY29uZmlncywgdGFyZ2V0KSkge1xuICAgIGlmIChjb25maWcuc2VydmVyICYmIGNvbmZpZy5zZXJ2ZXIucG9ydCkge1xuICAgICAgY29uZmlnLnNlcnZlci5wb3J0ID0gbm9ybWFsaXplUG9ydChjb25maWcuc2VydmVyLnBvcnQpXG4gICAgfVxuICAgIGNvbmZpZ1t0YXJnZXRdID0gY29uZmlnc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ0NoZWNrKGNvbmZpZ3M6IGFueSwgdGFyZ2V0OiBzdHJpbmcpIHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcigpO1xuXG4gIGlmICghY29uZmlncykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ29uZmlndXJhdGlvbiBpcyBtaXNzaW5nJylcbiAgfVxuICBpZiAodGFyZ2V0ID09PSAnc2V0dGluZ3MnKSB7XG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IHZhbGlkYXRvci52YWxpZGF0ZShjb25maWdzLCBzZXR0aW5nc1NjaGVtYSlcbiAgICBpZiAodmFsaWRhdGlvbi5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2codmFsaWRhdGlvbi5lcnJvcnMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IodmFsaWRhdGlvbi5lcnJvcnMudG9TdHJpbmcoKSlcbiAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCA9PT0gJ2NvbmZpZycpIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdG9yLnZhbGlkYXRlKGNvbmZpZ3MsIGNvbmZpZ1NjaGVtYSlcbiAgICBpZiAodmFsaWRhdGlvbi5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHZhbGlkYXRpb24uZXJyb3JzLnRvU3RyaW5nKCkpXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uZmlnXG59XG4iXX0=