"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.catchMiddleware = catchMiddleware;
exports.buildError = buildError;
exports.addToResponse = addToResponse;
exports.nextAndReturn = nextAndReturn;
exports.hasAuthorization = hasAuthorization;
exports.filterVisibleTableColumns = filterVisibleTableColumns;
exports.runHook = runHook;
exports.getTableConfig = getTableConfig;
exports.getColumnsByName = getColumnsByName;
exports.getColumnsWithRelations = getColumnsWithRelations;
exports.applyQueryFilters = applyQueryFilters;
exports.errorHandler = void 0;

var _types = require("../types");

var _configLoader = _interopRequireDefault(require("./configLoader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function catchMiddleware(next) {
  return function (err) {
    if (next) {
      next(err);
    }

    return Promise.reject({
      error: err
    });
  };
}

function buildError(message, status) {
  var err = new _types.HttpException(status, message);
  return err;
}

function addToResponse(res, target) {
  return function (data) {
    if (res) {
      res.data = _objectSpread({}, res.data, _defineProperty({}, target, data));
      return res;
    }

    throw buildError('Response object not valid', 500);
  };
}

function nextAndReturn(next) {
  return function (data) {
    if (next) {
      next();
    }

    return Promise.resolve(data);
  };
} // error handler


var errorHandler = function errorHandler(err, req, res) {
  res.status(err.status || 500);
  res.json({
    message: err.message
  });
};

exports.errorHandler = errorHandler;

function hasAuthorization(tableRoles) {
  var user = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    roles: []
  };
  var isAuthorized = 'true';

  if (tableRoles && tableRoles.length) {
    isAuthorized = tableRoles.find(function (tableRole) {
      if (tableRole === 'all') {
        return true;
      }

      var userHasAuthorization = user.roles.find(function (userRole) {
        return userRole === tableRole;
      });
      return userHasAuthorization ? true : false;
    });
  }

  return isAuthorized ? true : false;
}

function filterVisibleTableColumns(table, target) {
  return table.columns.filter(function (column) {
    return column.visible[target];
  }).map(function (column) {
    return column.name;
  });
}

function runHook(TABLE, hook, instance, req, res, database, results) {
  if (TABLE.hooks && TABLE.hooks[hook]) {
    var HOOK = TABLE.hooks[hook];

    if (database && HOOK && HOOK[instance]) {
      var CALLER = HOOK[instance];
      return CALLER ? CALLER(req, res, database, TABLE.name, results) : Promise.resolve(hook === 'getTableCount' ? results.length : results);
    }
  }

  return Promise.resolve(hook === 'getTableCount' ? results.length : results);
}

function getTableConfig(TABLE_NAME) {
  return (0, _configLoader.default)().settings.filter(function (tableItem) {
    return tableItem.name === TABLE_NAME;
  })[0];
}

function getColumnsByName(TABLE_CONFIG) {
  var columnsByName = {};
  TABLE_CONFIG.columns.forEach(function (column) {
    columnsByName[column.name] = column;
  });
  return columnsByName;
}

function getColumnsWithRelations(TABLE_CONFIG) {
  return TABLE_CONFIG.columns.filter(function (column) {
    return column.relation;
  });
}

function applyQueryFilters(QUERY, filters, TABLE_CONFIG) {
  var columnsByName = getColumnsByName(TABLE_CONFIG);
  var FILTERS = JSON.parse(filters);
  Object.keys(FILTERS).forEach(function (key, index) {
    if (columnsByName[key].type === 'int(11)') {
      index === 0 ? QUERY.where(_defineProperty({}, key, FILTERS[key])) : QUERY.andWhere(_defineProperty({}, key, FILTERS[key]));
    } else {
      index === 0 ? QUERY.where(key, 'like', '%' + FILTERS[key] + '%') : QUERY.andWhere(key, 'like', '%' + FILTERS[key] + '%');
    }
  });
  return QUERY;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOlsiY2F0Y2hNaWRkbGV3YXJlIiwibmV4dCIsImVyciIsIlByb21pc2UiLCJyZWplY3QiLCJlcnJvciIsImJ1aWxkRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIiwiSHR0cEV4Y2VwdGlvbiIsImFkZFRvUmVzcG9uc2UiLCJyZXMiLCJ0YXJnZXQiLCJkYXRhIiwibmV4dEFuZFJldHVybiIsInJlc29sdmUiLCJlcnJvckhhbmRsZXIiLCJyZXEiLCJqc29uIiwiaGFzQXV0aG9yaXphdGlvbiIsInRhYmxlUm9sZXMiLCJ1c2VyIiwicm9sZXMiLCJpc0F1dGhvcml6ZWQiLCJsZW5ndGgiLCJmaW5kIiwidGFibGVSb2xlIiwidXNlckhhc0F1dGhvcml6YXRpb24iLCJ1c2VyUm9sZSIsImZpbHRlclZpc2libGVUYWJsZUNvbHVtbnMiLCJ0YWJsZSIsImNvbHVtbnMiLCJmaWx0ZXIiLCJjb2x1bW4iLCJ2aXNpYmxlIiwibWFwIiwibmFtZSIsInJ1bkhvb2siLCJUQUJMRSIsImhvb2siLCJpbnN0YW5jZSIsImRhdGFiYXNlIiwicmVzdWx0cyIsImhvb2tzIiwiSE9PSyIsIkNBTExFUiIsImdldFRhYmxlQ29uZmlnIiwiVEFCTEVfTkFNRSIsInNldHRpbmdzIiwidGFibGVJdGVtIiwiZ2V0Q29sdW1uc0J5TmFtZSIsIlRBQkxFX0NPTkZJRyIsImNvbHVtbnNCeU5hbWUiLCJmb3JFYWNoIiwiZ2V0Q29sdW1uc1dpdGhSZWxhdGlvbnMiLCJyZWxhdGlvbiIsImFwcGx5UXVlcnlGaWx0ZXJzIiwiUVVFUlkiLCJmaWx0ZXJzIiwiRklMVEVSUyIsIkpTT04iLCJwYXJzZSIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJpbmRleCIsInR5cGUiLCJ3aGVyZSIsImFuZFdoZXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7QUFLTyxTQUFTQSxlQUFULENBQXlCQyxJ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R0Q7QUFDRixHQWZIO0FBa0JBLFNBQU9QLEtBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFeGNlcHRpb24sIElNQ1JlcXVlc3QsIElNQ1Jlc3BvbnNlLCBJVXNlciB9IGZyb20gJ0Byb290L2FwaS90eXBlcydcbmltcG9ydCBjb25maWcgZnJvbSAnQHJvb3QvYXBpL3V0aWxzL2NvbmZpZ0xvYWRlcidcbmltcG9ydCB7IEhvb2tzLCBJQ29sdW1uSW5mbywgSVRhYmxlSW5mbyB9IGZyb20gJ0Byb290L2NvbmZpZ0dlbmVyYXRvcidcbmltcG9ydCB7IEVycm9yUmVxdWVzdEhhbmRsZXIsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgS25leCBmcm9tICdrbmV4J1xuXG5leHBvcnQgZnVuY3Rpb24gY2F0Y2hNaWRkbGV3YXJlKG5leHQ6IE5leHRGdW5jdGlvbikge1xuICByZXR1cm4gKGVycjogSHR0cEV4Y2VwdGlvbikgPT4ge1xuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0KGVycilcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgIGVycm9yOiBlcnIsXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIHN0YXR1czogbnVtYmVyKSB7XG4gIGNvbnN0IGVyciA9IG5ldyBIdHRwRXhjZXB0aW9uKHN0YXR1cywgbWVzc2FnZSlcbiAgcmV0dXJuIGVyclxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9SZXNwb25zZShyZXM6IElNQ1Jlc3BvbnNlLCB0YXJnZXQ6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oZGF0YTogYW55KSB7XG4gICAgaWYgKHJlcykge1xuICAgICAgcmVzLmRhdGEgPSB7XG4gICAgICAgIC4uLnJlcy5kYXRhLFxuICAgICAgICBbdGFyZ2V0XTogZGF0YSxcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNcbiAgICB9XG4gICAgdGhyb3cgYnVpbGRFcnJvcignUmVzcG9uc2Ugb2JqZWN0IG5vdCB2YWxpZCcsIDUwMClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFuZFJldHVybihuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGE6IGFueSkge1xuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0KClcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkYXRhKVxuICB9XG59XG5cbi8vIGVycm9yIGhhbmRsZXJcbmV4cG9ydCBjb25zdCBlcnJvckhhbmRsZXI6IEVycm9yUmVxdWVzdEhhbmRsZXIgPSAoZXJyLCByZXEsIHJlcykgPT4ge1xuICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKVxuICByZXMuanNvbih7XG4gICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdXRob3JpemF0aW9uKHRhYmxlUm9sZXM6IHN0cmluZ1tdLCB1c2VyOiBJVXNlciA9IHtyb2xlczogW119KTogYm9vbGVhbiB7XG4gIGxldCBpc0F1dGhvcml6ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9ICd0cnVlJ1xuXG4gIGlmICh0YWJsZVJvbGVzICYmIHRhYmxlUm9sZXMubGVuZ3RoKSB7XG4gICAgaXNBdXRob3JpemVkID0gdGFibGVSb2xlcy5maW5kKFxuICAgICAgKHRhYmxlUm9sZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICh0YWJsZVJvbGUgPT09ICdhbGwnKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1c2VySGFzQXV0aG9yaXphdGlvbiA9IHVzZXIucm9sZXMuZmluZChcbiAgICAgICAgICAodXNlclJvbGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICh1c2VyUm9sZSA9PT0gdGFibGVSb2xlKTtcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIHVzZXJIYXNBdXRob3JpemF0aW9uID8gdHJ1ZSA6IGZhbHNlXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGlzQXV0aG9yaXplZCA/IHRydWUgOiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyVmlzaWJsZVRhYmxlQ29sdW1ucyh0YWJsZTogSVRhYmxlSW5mbywgdGFyZ2V0OiAnbWFpbicgfCAnZGV0YWlsJykge1xuICByZXR1cm4gdGFibGUuY29sdW1ucy5maWx0ZXIoXG4gICAgKGNvbHVtbikgPT4gY29sdW1uLnZpc2libGVbdGFyZ2V0XVxuICApLm1hcChcbiAgICAoY29sdW1uKSA9PiBjb2x1bW4ubmFtZVxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5Ib29rKFxuICBUQUJMRTogSVRhYmxlSW5mbyxcbiAgaG9vazogSG9va3MsXG4gIGluc3RhbmNlOiAnYWZ0ZXInIHwgJ2JlZm9yZScsXG4gIHJlcTogSU1DUmVxdWVzdCxcbiAgcmVzOiBJTUNSZXNwb25zZSxcbiAgZGF0YWJhc2U6IEtuZXggfCBudWxsLFxuICByZXN1bHRzOiBhbnlcbikge1xuICBpZiAoVEFCTEUuaG9va3MgJiYgVEFCTEUuaG9va3NbaG9va10pIHtcbiAgICBjb25zdCBIT09LID0gVEFCTEUuaG9va3NbaG9va11cbiAgICBpZiAoZGF0YWJhc2UgJiYgSE9PSyAmJiBIT09LW2luc3RhbmNlXSkge1xuICAgICAgY29uc3QgQ0FMTEVSICA9IEhPT0tbaW5zdGFuY2VdXG4gICAgICByZXR1cm4gQ0FMTEVSID9cbiAgICAgICAgQ0FMTEVSKHJlcSwgcmVzLCBkYXRhYmFzZSwgVEFCTEUubmFtZSwgcmVzdWx0cykgOlxuICAgICAgICBQcm9taXNlLnJlc29sdmUoaG9vayA9PT0gJ2dldFRhYmxlQ291bnQnID8gcmVzdWx0cy5sZW5ndGggOiByZXN1bHRzKVxuICAgIH1cbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhvb2sgPT09ICdnZXRUYWJsZUNvdW50JyA/IHJlc3VsdHMubGVuZ3RoIDogcmVzdWx0cylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlQ29uZmlnKFRBQkxFX05BTUU6IHN0cmluZykge1xuICByZXR1cm4gY29uZmlnKCkuc2V0dGluZ3MuZmlsdGVyKFxuICAgICh0YWJsZUl0ZW0pID0+IHRhYmxlSXRlbS5uYW1lID09PSBUQUJMRV9OQU1FXG4gIClbMF1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbHVtbnNCeU5hbWUoVEFCTEVfQ09ORklHOiBJVGFibGVJbmZvKSB7XG4gIGNvbnN0IGNvbHVtbnNCeU5hbWU6IHtcbiAgICBba2V5OiBzdHJpbmddOiBJQ29sdW1uSW5mb1xuICB9ID0ge31cblxuICBUQUJMRV9DT05GSUcuY29sdW1ucy5mb3JFYWNoKFxuICAgIChjb2x1bW4pID0+IHtcbiAgICAgIGNvbHVtbnNCeU5hbWVbY29sdW1uLm5hbWVdID0gY29sdW1uXG4gICAgfVxuICApXG5cbiAgcmV0dXJuIGNvbHVtbnNCeU5hbWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbHVtbnNXaXRoUmVsYXRpb25zKFRBQkxFX0NPTkZJRzogSVRhYmxlSW5mbykge1xuICByZXR1cm4gVEFCTEVfQ09ORklHLmNvbHVtbnMuZmlsdGVyKFxuICAgIChjb2x1bW4pID0+IGNvbHVtbi5yZWxhdGlvblxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVF1ZXJ5RmlsdGVycyhRVUVSWTogS25leC5RdWVyeUJ1aWxkZXIsIGZpbHRlcnM6IHN0cmluZywgVEFCTEVfQ09ORklHOiBJVGFibGVJbmZvKSB7XG4gIGNvbnN0IGNvbHVtbnNCeU5hbWUgPSBnZXRDb2x1bW5zQnlOYW1lKFRBQkxFX0NPTkZJRylcbiAgY29uc3QgRklMVEVSUyA9IEpTT04ucGFyc2UoZmlsdGVycylcbiAgT2JqZWN0LmtleXMoRklMVEVSUykuZm9yRWFjaChcbiAgICAoa2V5LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGNvbHVtbnNCeU5hbWVba2V5XS50eXBlID09PSAnaW50KDExKScpIHtcbiAgICAgICAgaW5kZXggPT09IDAgP1xuICAgICAgICAgIFFVRVJZLndoZXJlKHtcbiAgICAgICAgICAgIFtrZXldOiBGSUxURVJTW2tleV0sXG4gICAgICAgICAgfSkgOlxuICAgICAgICAgIFFVRVJZLmFuZFdoZXJlKHtcbiAgICAgICAgICAgIFtrZXldOiBGSUxURVJTW2tleV0sXG4gICAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4ID09PSAwID9cbiAgICAgICAgICBRVUVSWS53aGVyZShrZXksICdsaWtlJywgJyUnICsgRklMVEVSU1trZXldICsgJyUnKSA6XG4gICAgICAgICAgUVVFUlkuYW5kV2hlcmUoa2V5LCAnbGlrZScsICclJyArIEZJTFRFUlNba2V5XSArICclJylcbiAgICAgIH1cbiAgICB9XG4gIClcblxuICByZXR1cm4gUVVFUllcbn1cbiJdfQ==