"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.catchMiddleware = catchMiddleware;
exports.buildError = buildError;
exports.addToResponse = addToResponse;
exports.nextAndReturn = nextAndReturn;
exports.hasAuthorization = hasAuthorization;
exports.filterVisibleTableColumns = filterVisibleTableColumns;
exports.runHook = runHook;
exports.getTableConfig = getTableConfig;
exports.getColumnsByName = getColumnsByName;
exports.getColumnsWithRelations = getColumnsWithRelations;
exports.applyQueryFilters = applyQueryFilters;
exports.errorHandler = void 0;

var _types = require("../types");

var _configLoader = _interopRequireDefault(require("./configLoader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function catchMiddleware(next) {
  return function (err) {
    if (next) {
      next(err);
    }

    return Promise.reject({
      error: err
    });
  };
}

function buildError(message, status) {
  var err = new _types.HttpException(status, message);
  return err;
}

function addToResponse(res, target) {
  return function (data) {
    if (res) {
      res.data = _objectSpread({}, res.data, _defineProperty({}, target, data));
      return res;
    }

    throw buildError('Response object not valid', 500);
  };
}

function nextAndReturn(next) {
  return function (data) {
    if (next) {
      next();
    }

    return Promise.resolve(data);
  };
} // error handler


var errorHandler = function errorHandler(err, req, res) {
  res.status(err.status || 500);
  res.json({
    message: err.message
  });
};

exports.errorHandler = errorHandler;

function hasAuthorization(tableRoles) {
  var user = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    roles: []
  };
  var isAuthorized = 'true';

  if (tableRoles && tableRoles.length) {
    isAuthorized = tableRoles.find(function (tableRole) {
      if (tableRole === 'all') {
        return true;
      }

      var userHasAuthorization = user.roles.find(function (userRole) {
        return userRole.name === tableRole;
      });
      return userHasAuthorization ? true : false;
    });
  }

  return isAuthorized ? true : false;
}

function filterVisibleTableColumns(table, target) {
  return table.columns.filter(function (column) {
    return column.visible[target] || column.name === table.pk;
  }).map(function (column) {
    return column.name;
  });
}

function runHook(TABLE, hook, instance, req, res, database, results) {
  if (TABLE.hooks && TABLE.hooks[hook]) {
    var HOOK = TABLE.hooks[hook];

    if (database && HOOK && HOOK[instance]) {
      var CALLER = HOOK[instance];
      return CALLER ? CALLER(req, res, database, TABLE.name, results) : Promise.resolve(hook === 'getTableCount' ? results.length : results);
    }
  }

  return Promise.resolve(hook === 'getTableCount' ? results.length : results);
}

function getTableConfig(TABLE_NAME) {
  return (0, _configLoader.default)().settings.filter(function (tableItem) {
    return tableItem.name === TABLE_NAME;
  })[0];
}

function getColumnsByName(TABLE_CONFIG) {
  var columnsByName = {};
  TABLE_CONFIG.columns.forEach(function (column) {
    columnsByName[column.name] = column;
  });
  return columnsByName;
}

function getColumnsWithRelations(TABLE_CONFIG) {
  return TABLE_CONFIG.columns.filter(function (column) {
    return column.relation;
  });
}

function applyQueryFilters(QUERY, filters, TABLE_CONFIG) {
  var columnsByName = getColumnsByName(TABLE_CONFIG);
  var FILTERS = JSON.parse(filters);
  Object.keys(FILTERS).forEach(function (key, index) {
    if (columnsByName[key].type === 'int(11)') {
      index === 0 ? QUERY.where(_defineProperty({}, key, FILTERS[key])) : QUERY.andWhere(_defineProperty({}, key, FILTERS[key]));
    } else {
      index === 0 ? QUERY.where(key, 'like', '%' + FILTERS[key] + '%') : QUERY.andWhere(key, 'like', '%' + FILTERS[key] + '%');
    }
  });
  return QUERY;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOlsiY2F0Y2hNaWRkbGV3YXJlIiwibmV4dCIsImVyciIsIlByb21pc2UiLCJyZWplY3QiLCJlcnJvciIsImJ1aWxkRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIiwiSHR0cEV4Y2VwdGlvbiIsImFkZFRvUmVzcG9uc2UiLCJyZXMiLCJ0YXJnZXQiLCJkYXRhIiwibmV4dEFuZFJldHVybiIsInJlc29sdmUiLCJlcnJvckhhbmRsZXIiLCJyZXEiLCJqc29uIiwiaGFzQXV0aG9yaXphdGlvbiIsInRhYmxlUm9sZXMiLCJ1c2VyIiwicm9sZXMiLCJpc0F1dGhvcml6ZWQiLCJsZW5ndGgiLCJmaW5kIiwidGFibGVSb2xlIiwidXNlckhhc0F1dGhvcml6YXRpb24iLCJ1c2VyUm9sZSIsIm5hbWUiLCJmaWx0ZXJWaXNpYmxlVGFibGVDb2x1bW5zIiwidGFibGUiLCJjb2x1bW5zIiwiZmlsdGVyIiwiY29sdW1uIiwidmlzaWJsZSIsInBrIiwibWFwIiwicnVuSG9vayIsIlRBQkxFIiwiaG9vayIsImluc3RhbmNlIiwiZGF0YWJhc2UiLCJyZXN1bHRzIiwiaG9va3MiLCJIT09LIiwiQ0FMTEVSIiwiZ2V0VGFibGVDb25maWciLCJUQUJMRV9OQU1FIiwic2V0dGluZ3MiLCJ0YWJsZUl0ZW0iLCJnZXRDb2x1bW5zQnlOYW1lIiwiVEFCTEVfQ09ORklHIiwiY29sdW1uc0J5TmFtZSIsImZvckVhY2giLCJnZXRDb2x1bW5zV2l0aFJlbGF0aW9ucyIsInJlbGF0aW9uIiwiYXBwbHlRdWVyeUZpbHRlcnMiLCJRVUVSWSIsImZpbHRlcnMiLCJGSUxURVJTIiwiSlNPTiIsInBhcnNlIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImluZGV4IiwidHlwZSIsIndoZXJlIiwiYW5kV2hlcmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7OztBQUtPLFNBQVNBLGVBQVQsQ0FB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LE1BQXBCLEVBQTRCLE1BQU1MLE9BQU8sQ0FBQ0ssR0FBRCxDQUFiLEdBQXFCLEdBQWpELENBRkY7QUFHRDtBQUNGLEdBZkg7QUFrQkEsU0FBT1AsS0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEV4Y2VwdGlvbiwgSU1DUmVxdWVzdCwgSU1DUmVzcG9uc2UsIElVc2VyIH0gZnJvbSAnQHJvb3QvYXBpL3R5cGVzJ1xuaW1wb3J0IGNvbmZpZyBmcm9tICdAcm9vdC9hcGkvdXRpbHMvY29uZmlnTG9hZGVyJ1xuaW1wb3J0IHsgSG9va3MsIElDb2x1bW5JbmZvLCBJVGFibGVJbmZvIH0gZnJvbSAnQHJvb3QvY29uZmlnR2VuZXJhdG9yJ1xuaW1wb3J0IHsgRXJyb3JSZXF1ZXN0SGFuZGxlciwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcydcbmltcG9ydCBLbmV4IGZyb20gJ2tuZXgnXG5cbmV4cG9ydCBmdW5jdGlvbiBjYXRjaE1pZGRsZXdhcmUobmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gIHJldHVybiAoZXJyOiBIdHRwRXhjZXB0aW9uKSA9PiB7XG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQoZXJyKVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgZXJyb3I6IGVycixcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEVycm9yKG1lc3NhZ2U6IHN0cmluZywgc3RhdHVzOiBudW1iZXIpIHtcbiAgY29uc3QgZXJyID0gbmV3IEh0dHBFeGNlcHRpb24oc3RhdHVzLCBtZXNzYWdlKVxuICByZXR1cm4gZXJyXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRUb1Jlc3BvbnNlKHJlczogSU1DUmVzcG9uc2UsIHRhcmdldDogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihkYXRhOiBhbnkpIHtcbiAgICBpZiAocmVzKSB7XG4gICAgICByZXMuZGF0YSA9IHtcbiAgICAgICAgLi4ucmVzLmRhdGEsXG4gICAgICAgIFt0YXJnZXRdOiBkYXRhLFxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgICB0aHJvdyBidWlsZEVycm9yKCdSZXNwb25zZSBvYmplY3Qgbm90IHZhbGlkJywgNTAwKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0QW5kUmV0dXJuKG5leHQ6IE5leHRGdW5jdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24oZGF0YTogYW55KSB7XG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQoKVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpXG4gIH1cbn1cblxuLy8gZXJyb3IgaGFuZGxlclxuZXhwb3J0IGNvbnN0IGVycm9ySGFuZGxlcjogRXJyb3JSZXF1ZXN0SGFuZGxlciA9IChlcnIsIHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zdGF0dXMoZXJyLnN0YXR1cyB8fCA1MDApXG4gIHJlcy5qc29uKHtcbiAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0F1dGhvcml6YXRpb24odGFibGVSb2xlczogc3RyaW5nW10sIHVzZXI6IElVc2VyID0ge3JvbGVzOiBbXX0pOiBib29sZWFuIHtcbiAgbGV0IGlzQXV0aG9yaXplZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gJ3RydWUnXG4gIGlmICh0YWJsZVJvbGVzICYmIHRhYmxlUm9sZXMubGVuZ3RoKSB7XG4gICAgaXNBdXRob3JpemVkID0gdGFibGVSb2xlcy5maW5kKFxuICAgICAgKHRhYmxlUm9sZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICh0YWJsZVJvbGUgPT09ICdhbGwnKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1c2VySGFzQXV0aG9yaXphdGlvbiA9IHVzZXIucm9sZXMuZmluZChcbiAgICAgICAgICAodXNlclJvbGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAodXNlclJvbGUubmFtZSA9PT0gdGFibGVSb2xlKTtcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIHVzZXJIYXNBdXRob3JpemF0aW9uID8gdHJ1ZSA6IGZhbHNlXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGlzQXV0aG9yaXplZCA/IHRydWUgOiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyVmlzaWJsZVRhYmxlQ29sdW1ucyh0YWJsZTogSVRhYmxlSW5mbywgdGFyZ2V0OiAnbWFpbicgfCAnZGV0YWlsJykge1xuICByZXR1cm4gdGFibGUuY29sdW1ucy5maWx0ZXIoXG4gICAgKGNvbHVtbikgPT4gY29sdW1uLnZpc2libGVbdGFyZ2V0XSB8fCBjb2x1bW4ubmFtZSA9PT0gdGFibGUucGtcbiAgKS5tYXAoXG4gICAgKGNvbHVtbikgPT4gY29sdW1uLm5hbWVcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuSG9vayhcbiAgVEFCTEU6IElUYWJsZUluZm8sXG4gIGhvb2s6IEhvb2tzLFxuICBpbnN0YW5jZTogJ2FmdGVyJyB8ICdiZWZvcmUnLFxuICByZXE6IElNQ1JlcXVlc3QsXG4gIHJlczogSU1DUmVzcG9uc2UsXG4gIGRhdGFiYXNlOiBLbmV4IHwgbnVsbCxcbiAgcmVzdWx0czogYW55XG4pIHtcbiAgaWYgKFRBQkxFLmhvb2tzICYmIFRBQkxFLmhvb2tzW2hvb2tdKSB7XG4gICAgY29uc3QgSE9PSyA9IFRBQkxFLmhvb2tzW2hvb2tdXG4gICAgaWYgKGRhdGFiYXNlICYmIEhPT0sgJiYgSE9PS1tpbnN0YW5jZV0pIHtcbiAgICAgIGNvbnN0IENBTExFUiAgPSBIT09LW2luc3RhbmNlXVxuICAgICAgcmV0dXJuIENBTExFUiA/XG4gICAgICAgIENBTExFUihyZXEsIHJlcywgZGF0YWJhc2UsIFRBQkxFLm5hbWUsIHJlc3VsdHMpIDpcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGhvb2sgPT09ICdnZXRUYWJsZUNvdW50JyA/IHJlc3VsdHMubGVuZ3RoIDogcmVzdWx0cylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShob29rID09PSAnZ2V0VGFibGVDb3VudCcgPyByZXN1bHRzLmxlbmd0aCA6IHJlc3VsdHMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZUNvbmZpZyhUQUJMRV9OQU1FOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGNvbmZpZygpLnNldHRpbmdzLmZpbHRlcihcbiAgICAodGFibGVJdGVtKSA9PiB0YWJsZUl0ZW0ubmFtZSA9PT0gVEFCTEVfTkFNRVxuICApWzBdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2x1bW5zQnlOYW1lKFRBQkxFX0NPTkZJRzogSVRhYmxlSW5mbykge1xuICBjb25zdCBjb2x1bW5zQnlOYW1lOiB7XG4gICAgW2tleTogc3RyaW5nXTogSUNvbHVtbkluZm9cbiAgfSA9IHt9XG5cbiAgVEFCTEVfQ09ORklHLmNvbHVtbnMuZm9yRWFjaChcbiAgICAoY29sdW1uKSA9PiB7XG4gICAgICBjb2x1bW5zQnlOYW1lW2NvbHVtbi5uYW1lXSA9IGNvbHVtblxuICAgIH1cbiAgKVxuXG4gIHJldHVybiBjb2x1bW5zQnlOYW1lXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2x1bW5zV2l0aFJlbGF0aW9ucyhUQUJMRV9DT05GSUc6IElUYWJsZUluZm8pIHtcbiAgcmV0dXJuIFRBQkxFX0NPTkZJRy5jb2x1bW5zLmZpbHRlcihcbiAgICAoY29sdW1uKSA9PiBjb2x1bW4ucmVsYXRpb25cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlRdWVyeUZpbHRlcnMoUVVFUlk6IEtuZXguUXVlcnlCdWlsZGVyLCBmaWx0ZXJzOiBzdHJpbmcsIFRBQkxFX0NPTkZJRzogSVRhYmxlSW5mbykge1xuICBjb25zdCBjb2x1bW5zQnlOYW1lID0gZ2V0Q29sdW1uc0J5TmFtZShUQUJMRV9DT05GSUcpXG4gIGNvbnN0IEZJTFRFUlMgPSBKU09OLnBhcnNlKGZpbHRlcnMpXG4gIE9iamVjdC5rZXlzKEZJTFRFUlMpLmZvckVhY2goXG4gICAgKGtleSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChjb2x1bW5zQnlOYW1lW2tleV0udHlwZSA9PT0gJ2ludCgxMSknKSB7XG4gICAgICAgIGluZGV4ID09PSAwID9cbiAgICAgICAgICBRVUVSWS53aGVyZSh7XG4gICAgICAgICAgICBba2V5XTogRklMVEVSU1trZXldLFxuICAgICAgICAgIH0pIDpcbiAgICAgICAgICBRVUVSWS5hbmRXaGVyZSh7XG4gICAgICAgICAgICBba2V5XTogRklMVEVSU1trZXldLFxuICAgICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleCA9PT0gMCA/XG4gICAgICAgICAgUVVFUlkud2hlcmUoa2V5LCAnbGlrZScsICclJyArIEZJTFRFUlNba2V5XSArICclJykgOlxuICAgICAgICAgIFFVRVJZLmFuZFdoZXJlKGtleSwgJ2xpa2UnLCAnJScgKyBGSUxURVJTW2tleV0gKyAnJScpXG4gICAgICB9XG4gICAgfVxuICApXG5cbiAgcmV0dXJuIFFVRVJZXG59XG4iXX0=