"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.catchMiddleware = catchMiddleware;
exports.buildError = buildError;
exports.addToResponse = addToResponse;
exports.nextAndReturn = nextAndReturn;
exports.hasAuthorization = hasAuthorization;
exports.filterTableColumns = filterTableColumns;
exports.runHook = runHook;
exports.getTableConfig = getTableConfig;
exports.errorHandler = void 0;

var _types = require("../types");

var _configLoader = _interopRequireDefault(require("./configLoader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function catchMiddleware(next) {
  return function (err) {
    if (next) {
      next(err);
    }

    return Promise.resolve({
      error: err
    });
  };
}

function buildError(message, status) {
  var err = new _types.HttpException(status, message);
  return err;
}

function addToResponse(res, target) {
  return function (data) {
    if (res) {
      res.data = _objectSpread({}, res.data, _defineProperty({}, target, data));
      return res;
    }

    throw buildError('Response object not valid', 500);
  };
}

function nextAndReturn(next) {
  return function (data) {
    if (next) {
      next();
    }

    return Promise.resolve(data);
  };
} // error handler


var errorHandler = function errorHandler(err, req, res) {
  res.status(err.status || 500);
  res.json({
    message: err.message
  });
};

exports.errorHandler = errorHandler;

function hasAuthorization(tableRoles, userRoles) {
  var isAuthorized = 'true';

  if (tableRoles && tableRoles.length) {
    isAuthorized = tableRoles.find(function (tableRole) {
      if (tableRole === 'all') {
        return true;
      }

      var userHasAuthorization = userRoles.find(function (userRole) {
        return userRole === tableRole;
      });
      return userHasAuthorization ? true : false;
    });
  }

  return isAuthorized ? true : false;
}

function filterTableColumns(table, target) {
  return table.columns.filter(function (column) {
    return column.visible[target];
  }).map(function (column) {
    return column.name;
  });
}

function runHook(TABLE, hook, instance, req, res, database, results) {
  if (TABLE.hooks && TABLE.hooks[hook]) {
    var HOOK = TABLE.hooks[hook];

    if (database && HOOK && HOOK[instance]) {
      var CALLER = HOOK[instance];
      return CALLER ? CALLER(req, res, database, TABLE.name, results) : Promise.resolve(hook === 'getTableCount' ? results.length : results);
    }
  }

  return Promise.resolve(hook === 'getTableCount' ? results.length : results);
}

function getTableConfig(TABLE_NAME) {
  return (0, _configLoader.default)().settings.filter(function (tableItem) {
    return tableItem.name === TABLE_NAME;
  })[0];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOlsiY2F0Y2hNaWRkbGV3YXJlIiwibmV4dCIsImVyciIsIlByb21pc2UiLCJyZXNvbHZlIiwiZXJyb3IiLCJidWlsZEVycm9yIiwibWVzc2FnZSIsInN0YXR1cyIsIkh0dHBFeGNlcHRpb24iLCJhZGRUb1Jlc3BvbnNlIiwicmVzIiwidGFyZ2V0IiwiZGF0YSIsIm5leHRBbmRSZXR1cm4iLCJlcnJvckhhbmRsZXIiLCJyZXEiLCJqc29uIiwiaGFzQXV0aG9yaXphdGlvbiIsInRhYmxlUm9sZXMiLCJ1c2VyUm9sZXMiLCJpc0F1dGhvcml6ZWQiLCJsZW5ndGgiLCJmaW5kIiwidGFibGVSb2xlIiwidXNlckhhc0F1dGhvcml6YXRpb24iLCJ1c2VyUm9sZSIsImZpbHRlclRhYmxlQ29sdW1ucyIsInRhYmxlIiwiY29sdW1ucyIsImZpbHRlciIsImNvbHVtbiIsInZpc2libGUiLCJtYXAiLCJuYW1lIiwicnVuSG9vayIsIlRBQkxFIiwiaG9vayIsImluc3RhbmNlIiwiZGF0YWJhc2UiLCJyZXN1bHRzIiwiaG9va3MiLCJIT09LIiwiQ0FMTEVSIiwiZ2V0VGFibGVDb25maWciLCJUQUJMRV9OQU1FIiwic2V0dGluZ3MiLCJ0YWJsZUl0ZW0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7OztBQUtPLFNBQVNBLGVBQVQsQ0FBeUJDLElBQXpCLEVBQTZDO0FBQ2xELFNBQU8sVUFBQ0MsR0FBRCxFQUF3QjtBQUM3QixRQUFJRCxJQUFKLEVBQVU7QUFDUkEsTUFBQUEsSUFBSSxDQUFDQyxHQUFELENBQUo7QUFDRDs7QUFDRCxXQUFPQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0I7QUFDckJDLE1BQUFBLEtBQUssRUFBRUg7QUFEYyxLQUFoQixDQUFQO0FBR0QsR0FQRDtBQVFEOztBQUVNLFNBQVNJLFVBQVQsQ0FBb0JDLE9BQXBCLEVBQXFDQyxNQUFyQyxFQUFxRDtB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QzNCLEdBQUQsRUFBTUwsR0FBTixFQUFXNEIsUUFBWCxFQUFxQkgsS0FBSyxDQUFDRixJQUEzQixFQUFpQ00sT0FBakMsQ0FESyxHQUVYckMsT0FBTyxDQUFDQyxPQUFSLENBQWdCaUMsSUFBSSxLQUFLLGVBQVQsR0FBMkJHLE9BQU8sQ0FBQ2xCLE1BQW5DLEdBQTRDa0IsT0FBNUQsQ0FGRjtBQUdEO0FBQ0Y7O0FBQ0QsU0FBT3JDLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQmlDLElBQUksS0FBSyxlQUFULEdBQTJCRyxPQUFPLENBQUNsQixNQUFuQyxHQUE0Q2tCLE9BQTVELENBQVA7QUFDRDs7QUFFTSxTQUFTSSxjQUFULENBQXdCQyxVQUF4QixFQUE0QztBQUNqRCxTQUFPLDZCQUFTQyxRQUFULENBQWtCaEIsTUFBbEIsQ0FDTCxVQUFDaUIsU0FBRDtBQUFBLFdBQWVBLFNBQVMsQ0FBQ2IsSUFBVixLQUFtQlcsVUFBbEM7QUFBQSxHQURLLEVBRUwsQ0FGSyxDQUFQO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXhjZXB0aW9uLCBJTUNSZXF1ZXN0LCBJTUNSZXNwb25zZSB9IGZyb20gJ0Byb290L2FwaS90eXBlcydcbmltcG9ydCBjb25maWcgZnJvbSAnQHJvb3QvYXBpL3V0aWxzL2NvbmZpZ0xvYWRlcidcbmltcG9ydCB7IEhvb2tzLCBJVGFibGVJbmZvIH0gZnJvbSAnQHJvb3QvY29uZmlnR2VuZXJhdG9yJ1xuaW1wb3J0IHsgRXJyb3JSZXF1ZXN0SGFuZGxlciwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcydcbmltcG9ydCBLbmV4IGZyb20gJ2tuZXgnXG5cbmV4cG9ydCBmdW5jdGlvbiBjYXRjaE1pZGRsZXdhcmUobmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gIHJldHVybiAoZXJyOiBIdHRwRXhjZXB0aW9uKSA9PiB7XG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQoZXJyKVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgIGVycm9yOiBlcnIsXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIHN0YXR1czogbnVtYmVyKSB7XG4gIGNvbnN0IGVyciA9IG5ldyBIdHRwRXhjZXB0aW9uKHN0YXR1cywgbWVzc2FnZSlcbiAgcmV0dXJuIGVyclxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9SZXNwb25zZShyZXM6IElNQ1Jlc3BvbnNlLCB0YXJnZXQ6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oZGF0YTogYW55KSB7XG4gICAgaWYgKHJlcykge1xuICAgICAgcmVzLmRhdGEgPSB7XG4gICAgICAgIC4uLnJlcy5kYXRhLFxuICAgICAgICBbdGFyZ2V0XTogZGF0YSxcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNcbiAgICB9XG4gICAgdGhyb3cgYnVpbGRFcnJvcignUmVzcG9uc2Ugb2JqZWN0IG5vdCB2YWxpZCcsIDUwMClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFuZFJldHVybihuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGE6IGFueSkge1xuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0KClcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkYXRhKVxuICB9XG59XG5cbi8vIGVycm9yIGhhbmRsZXJcbmV4cG9ydCBjb25zdCBlcnJvckhhbmRsZXI6IEVycm9yUmVxdWVzdEhhbmRsZXIgPSAoZXJyLCByZXEsIHJlcykgPT4ge1xuICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKVxuICByZXMuanNvbih7XG4gICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdXRob3JpemF0aW9uKHRhYmxlUm9sZXM6IHN0cmluZ1tdLCB1c2VyUm9sZXM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XG4gIGxldCBpc0F1dGhvcml6ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9ICd0cnVlJ1xuXG4gIGlmICh0YWJsZVJvbGVzICYmIHRhYmxlUm9sZXMubGVuZ3RoKSB7XG4gICAgaXNBdXRob3JpemVkID0gdGFibGVSb2xlcy5maW5kKFxuICAgICAgKHRhYmxlUm9sZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICh0YWJsZVJvbGUgPT09ICdhbGwnKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1c2VySGFzQXV0aG9yaXphdGlvbiA9IHVzZXJSb2xlcy5maW5kKFxuICAgICAgICAgICh1c2VyUm9sZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHVzZXJSb2xlID09PSB0YWJsZVJvbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gdXNlckhhc0F1dGhvcml6YXRpb24gPyB0cnVlIDogZmFsc2VcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICByZXR1cm4gaXNBdXRob3JpemVkID8gdHJ1ZSA6IGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJUYWJsZUNvbHVtbnModGFibGU6IElUYWJsZUluZm8sIHRhcmdldDogJ21haW4nIHwgJ2RldGFpbCcpIHtcbiAgcmV0dXJuIHRhYmxlLmNvbHVtbnMuZmlsdGVyKFxuICAgIChjb2x1bW4pID0+IGNvbHVtbi52aXNpYmxlW3RhcmdldF1cbiAgKS5tYXAoXG4gICAgKGNvbHVtbikgPT4gY29sdW1uLm5hbWVcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuSG9vayhcbiAgVEFCTEU6IElUYWJsZUluZm8sXG4gIGhvb2s6IEhvb2tzLFxuICBpbnN0YW5jZTogJ2FmdGVyJyB8ICdiZWZvcmUnLFxuICByZXE6IElNQ1JlcXVlc3QsXG4gIHJlczogSU1DUmVzcG9uc2UsXG4gIGRhdGFiYXNlOiBLbmV4IHwgbnVsbCxcbiAgcmVzdWx0czogYW55XG4pIHtcbiAgaWYgKFRBQkxFLmhvb2tzICYmIFRBQkxFLmhvb2tzW2hvb2tdKSB7XG4gICAgY29uc3QgSE9PSyA9IFRBQkxFLmhvb2tzW2hvb2tdXG4gICAgaWYgKGRhdGFiYXNlICYmIEhPT0sgJiYgSE9PS1tpbnN0YW5jZV0pIHtcbiAgICAgIGNvbnN0IENBTExFUiAgPSBIT09LW2luc3RhbmNlXVxuICAgICAgcmV0dXJuIENBTExFUiA/XG4gICAgICAgIENBTExFUihyZXEsIHJlcywgZGF0YWJhc2UsIFRBQkxFLm5hbWUsIHJlc3VsdHMpIDpcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGhvb2sgPT09ICdnZXRUYWJsZUNvdW50JyA/IHJlc3VsdHMubGVuZ3RoIDogcmVzdWx0cylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShob29rID09PSAnZ2V0VGFibGVDb3VudCcgPyByZXN1bHRzLmxlbmd0aCA6IHJlc3VsdHMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZUNvbmZpZyhUQUJMRV9OQU1FOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGNvbmZpZygpLnNldHRpbmdzLmZpbHRlcihcbiAgICAodGFibGVJdGVtKSA9PiB0YWJsZUl0ZW0ubmFtZSA9PT0gVEFCTEVfTkFNRVxuICApWzBdXG59XG4iXX0=