"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.catchMiddleware = catchMiddleware;
exports.buildError = buildError;
exports.addToResponse = addToResponse;
exports.nextAndReturn = nextAndReturn;
exports.hasAuthorization = hasAuthorization;
exports.filterVisibleTableColumns = filterVisibleTableColumns;
exports.runHook = runHook;
exports.getTableConfig = getTableConfig;
exports.getColumnsByName = getColumnsByName;
exports.getColumnsWithRelations = getColumnsWithRelations;
exports.applyQueryFilters = applyQueryFilters;
exports.applyQuerySearch = applyQuerySearch;
exports.errorHandler = void 0;

var _types = require("../types");

var _configLoader = _interopRequireDefault(require("./configLoader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function catchMiddleware(next) {
  return function (err) {
    if (next) {
      next(err);
    }

    return Promise.reject({
      error: err
    });
  };
}

function buildError(message, status) {
  var err = new _types.HttpException(status, message);
  return err;
}

function addToResponse(res, target) {
  return function (data) {
    if (res) {
      res.data = _objectSpread({}, res.data, _defineProperty({}, target, data));
      return res;
    }

    throw buildError('Response object not valid', 500);
  };
}

function nextAndReturn(next) {
  return function (data) {
    if (next) {
      next();
    }

    return Promise.resolve(data);
  };
} // error handler


var errorHandler = function errorHandler(err, req, res) {
  res.status(err.status || 500);
  res.json({
    message: err.message
  });
};

exports.errorHandler = errorHandler;

function hasAuthorization(tableRoles) {
  var user = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    roles: []
  };
  var isAuthorized = 'true';

  if (tableRoles && tableRoles.length) {
    isAuthorized = tableRoles.find(function (tableRole) {
      if (tableRole === 'all') {
        return true;
      }

      var userHasAuthorization = user.roles.find(function (userRole) {
        return userRole.name === tableRole;
      });
      return userHasAuthorization ? true : false;
    });
  }

  return isAuthorized ? true : false;
}

function filterVisibleTableColumns(table, target) {
  var toKeep = {};

  if (table.chips) {
    table.chips.forEach(function (chip) {
      chip.columns.forEach(function (column) {
        toKeep[column.name] = true;
      });
    });
  }

  return table.columns.filter(function (column) {
    return column.visible[target] || column.name === table.pk || toKeep[column.name];
  }).map(function (column) {
    return column.name;
  });
}

function runHook(TABLE, hook, instance, req, res, database, results) {
  if (TABLE.hooks && TABLE.hooks[hook]) {
    var HOOK = TABLE.hooks[hook];

    if (database && HOOK && HOOK[instance]) {
      var CALLER = HOOK[instance];
      return CALLER ? instance === 'before' ? CALLER(req, res, database, TABLE.name) : CALLER(req, res, database, TABLE.name, results) : Promise.resolve(hook === 'getTableCount' ? results.length : results);
    }
  }

  return Promise.resolve(hook === 'getTableCount' ? results.length : results);
}

function getTableConfig(TABLE_NAME) {
  return (0, _configLoader.default)().settings.filter(function (tableItem) {
    return tableItem.name === TABLE_NAME;
  })[0];
}

function getColumnsByName(TABLE_CONFIG) {
  var columnsByName = {};
  TABLE_CONFIG.columns.forEach(function (column) {
    columnsByName[column.name] = column;
  });
  return columnsByName;
}

function getColumnsWithRelations(TABLE_CONFIG) {
  return TABLE_CONFIG.columns.filter(function (column) {
    return column.relation;
  });
}

function applyQueryFilters(QUERY, filters, TABLE_CONFIG) {
  var columnsByName = getColumnsByName(TABLE_CONFIG);
  var FILTERS = JSON.parse(filters);
  Object.keys(FILTERS).forEach(function (key, index) {
    if (columnsByName[key].type === 'int(11)') {
      index === 0 ? QUERY.where(_defineProperty({}, key, FILTERS[key])) : QUERY.andWhere(_defineProperty({}, key, FILTERS[key]));
    } else {
      index === 0 ? QUERY.where(key, 'like', '%' + FILTERS[key] + '%') : QUERY.andWhere(key, 'like', '%' + FILTERS[key] + '%');
    }
  });
  return QUERY;
}

function applyQuerySearch(QUERY, search, TABLE_CONFIG) {
  var searchFields = TABLE_CONFIG.searchFields || [];
  QUERY.where(function () {
    var _this = this;

    searchFields.forEach(function (searchField, index) {
      index === 0 ? _this.where(searchField, 'like', '%' + search + '%') : _this.orWhere(searchField, 'like', '%' + search + '%');
    });
  });
  return QUERY;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,