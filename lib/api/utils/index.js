"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.catchMiddleware = catchMiddleware;
exports.buildError = buildError;
exports.addToResponse = addToResponse;
exports.nextAndReturn = nextAndReturn;
exports.hasAuthorization = hasAuthorization;
exports.filterVisibleTableColumns = filterVisibleTableColumns;
exports.runHook = runHook;
exports.getTableConfig = getTableConfig;
exports.getColumnsByName = getColumnsByName;
exports.getColumnsWithRelations = getColumnsWithRelations;
exports.applyQueryFilters = applyQueryFilters;
exports.errorHandler = void 0;

var _types = require("../types");

var _configLoader = _interopRequireDefault(require("./configLoader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function catchMiddleware(next) {
  return function (err) {
    if (next) {
      next(err);
    }

    return Promise.reject({
      error: err
    });
  };
}

function buildError(message, status) {
  var err = new _types.HttpException(status, message);
  return err;
}

function addToResponse(res, target) {
  return function (data) {
    if (res) {
      res.data = _objectSpread({}, res.data, _defineProperty({}, target, data));
      return res;
    }

    throw buildError('Response object not valid', 500);
  };
}

function nextAndReturn(next) {
  return function (data) {
    if (next) {
      next();
    }

    return Promise.resolve(data);
  };
} // error handler


var errorHandler = function errorHandler(err, req, res) {
  res.status(err.status || 500);
  res.json({
    message: err.message
  });
};

exports.errorHandler = errorHandler;

function hasAuthorization(tableRoles) {
  var user = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    roles: []
  };
  var isAuthorized = 'true';

  if (tableRoles && tableRoles.length) {
    isAuthorized = tableRoles.find(function (tableRole) {
      if (tableRole === 'all') {
        return true;
      }

      var userHasAuthorization = user.roles.find(function (userRole) {
        return userRole.name === tableRole;
      });
      return userHasAuthorization ? true : false;
    });
  }

  return isAuthorized ? true : false;
}

function filterVisibleTableColumns(table, target) {
  return table.columns.filter(function (column) {
    return column.visible[target] || column.name === table.pk;
  }).map(function (column) {
    return column.name;
  });
}

function runHook(TABLE, hook, instance, req, res, database, results) {
  if (TABLE.hooks && TABLE.hooks[hook]) {
    var HOOK = TABLE.hooks[hook];

    if (database && HOOK && HOOK[instance]) {
      var CALLER = HOOK[instance];
      return CALLER ? instance === 'before' ? CALLER(req, res, database, TABLE.name) : CALLER(req, res, database, TABLE.name, results) : Promise.resolve(hook === 'getTableCount' ? results.length : results);
    }
  }

  return Promise.resolve(hook === 'getTableCount' ? results.length : results);
}

function getTableConfig(TABLE_NAME) {
  return (0, _configLoader.default)().settings.filter(function (tableItem) {
    return tableItem.name === TABLE_NAME;
  })[0];
}

function getColumnsByName(TABLE_CONFIG) {
  var columnsByName = {};
  TABLE_CONFIG.columns.forEach(function (column) {
    columnsByName[column.name] = column;
  });
  return columnsByName;
}

function getColumnsWithRelations(TABLE_CONFIG) {
  return TABLE_CONFIG.columns.filter(function (column) {
    return column.relation;
  });
}

function applyQueryFilters(QUERY, filters, TABLE_CONFIG) {
  var columnsByName = getColumnsByName(TABLE_CONFIG);
  var FILTERS = JSON.parse(filters);
  Object.keys(FILTERS).forEach(function (key, index) {
    if (columnsByName[key].type === 'int(11)') {
      index === 0 ? QUERY.where(_defineProperty({}, key, FILTERS[key])) : QUERY.andWhere(_defineProperty({}, key, FILTERS[key]));
    } else {
      index === 0 ? QUERY.where(key, 'like', '%' + FILTERS[key] + '%') : QUERY.andWhere(key, 'like', '%' + FILTERS[key] + '%');
    }
  });
  return QUERY;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOlsiY2F0Y2hNaWRkbGV3YXJlIiwibmV4dCIsImVyciIsIlByb21pc2UiLCJyZWplY3QiLCJlcnJvciIsImJ1aWxkRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIiwiSHR0cEV4Y2VwdGlvbiIsImFkZFRvUmVzcG9uc2UiLCJyZXMiLCJ0YXJnZXQiLCJkYXRhIiwibmV4dEFuZFJldHVybiIsInJlc29sdmUiLCJlcnJvckhhbmRsZXIiLCJyZXEiLCJqc29uIiwiaGFzQXV0aG9yaXphdGlvbiIsInRhYmxlUm9sZXMiLCJ1c2VyIiwicm9sZXMiLCJpc0F1dGhvcml6ZWQiLCJsZW5ndGgiLCJmaW5kIiwidGFibGVSb2xlIiwidXNlckhhc0F1dGhvcml6YXRpb24iLCJ1c2VyUm9sZSIsIm5hbWUiLCJmaWx0ZXJWaXNpYmxlVGFibGVDb2x1bW5zIiwidGFibGUiLCJjb2x1bW5zIiwiZmlsdGVyIiwiY29sdW1uIiwidmlzaWJsZSIsInBrIiwibWFwIiwicnVuSG9vayIsIlRBQkxFIiwiaG9vayIsImluc3RhbmNlIiwiZGF0YWJhc2UiLCJyZXN1bHRzIiwiaG9va3MiLCJIT09LIiwiQ0FMTEVSIiwiZ2V0VGFibGVDb25maWciLCJUQUJMRV9OQU1FIiwic2V0dGluZ3MiLCJ0YWJsZUl0ZW0iLCJnZXRDb2x1bW5zQnlOYW1lIiwiVEFCTEVfQ09ORklHIiwiY29sdW1uc0J5TmFtZSIsImZvckVhY2giLCJnZXRDb2x1bW5zV2l0aFJlbGF0aW9ucyIsInJlbGF0aW9uIiwiYXBwbHlRdWVyeUZpbHRlcnMiLCJRVUVSWSIsImZpbHRlcnMiLCJGSUxURVJTIiwiSlNPTiIsInBhcnNlIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImluZGV4IiwidHlwZSIsIndoZXJlIiwiYW5kV2hlcmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7OztBQUtPLFNBQVNBLGVBQVQsQ0FB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aUIsTUFBakIsRUFBeUIsTUFBTUwsT0FBTyxDQUFDSyxHQUFELENBQWIsR0FBcUIsR0FBOUMsQ0FERixHQUVFUCxLQUFLLENBQUNXLFFBQU4sQ0FBZUosR0FBZixFQUFvQixNQUFwQixFQUE0QixNQUFNTCxPQUFPLENBQUNLLEdBQUQsQ0FBYixHQUFxQixHQUFqRCxDQUZGO0FBR0Q7QUFDRixHQWZIO0FBa0JBLFNBQU9QLEtBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFeGNlcHRpb24sIElNQ1JlcXVlc3QsIElNQ1Jlc3BvbnNlLCBJVXNlciB9IGZyb20gJ0Byb290L2FwaS90eXBlcydcbmltcG9ydCBjb25maWcgZnJvbSAnQHJvb3QvYXBpL3V0aWxzL2NvbmZpZ0xvYWRlcidcbmltcG9ydCB7IEhvb2tzLCBJQ29sdW1uSW5mbywgSVRhYmxlSW5mbyB9IGZyb20gJ0Byb290L2NvbmZpZ0dlbmVyYXRvcidcbmltcG9ydCB7IEVycm9yUmVxdWVzdEhhbmRsZXIsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgS25leCBmcm9tICdrbmV4J1xuXG5leHBvcnQgZnVuY3Rpb24gY2F0Y2hNaWRkbGV3YXJlKG5leHQ6IE5leHRGdW5jdGlvbikge1xuICByZXR1cm4gKGVycjogSHR0cEV4Y2VwdGlvbikgPT4ge1xuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0KGVycilcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgIGVycm9yOiBlcnIsXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIHN0YXR1czogbnVtYmVyKSB7XG4gIGNvbnN0IGVyciA9IG5ldyBIdHRwRXhjZXB0aW9uKHN0YXR1cywgbWVzc2FnZSlcbiAgcmV0dXJuIGVyclxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9SZXNwb25zZShyZXM6IElNQ1Jlc3BvbnNlLCB0YXJnZXQ6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oZGF0YTogYW55KSB7XG4gICAgaWYgKHJlcykge1xuICAgICAgcmVzLmRhdGEgPSB7XG4gICAgICAgIC4uLnJlcy5kYXRhLFxuICAgICAgICBbdGFyZ2V0XTogZGF0YSxcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNcbiAgICB9XG4gICAgdGhyb3cgYnVpbGRFcnJvcignUmVzcG9uc2Ugb2JqZWN0IG5vdCB2YWxpZCcsIDUwMClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFuZFJldHVybihuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGE6IGFueSkge1xuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0KClcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkYXRhKVxuICB9XG59XG5cbi8vIGVycm9yIGhhbmRsZXJcbmV4cG9ydCBjb25zdCBlcnJvckhhbmRsZXI6IEVycm9yUmVxdWVzdEhhbmRsZXIgPSAoZXJyLCByZXEsIHJlcykgPT4ge1xuICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKVxuICByZXMuanNvbih7XG4gICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdXRob3JpemF0aW9uKHRhYmxlUm9sZXM6IHN0cmluZ1tdLCB1c2VyOiBJVXNlciA9IHtyb2xlczogW119KTogYm9vbGVhbiB7XG4gIGxldCBpc0F1dGhvcml6ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9ICd0cnVlJ1xuICBpZiAodGFibGVSb2xlcyAmJiB0YWJsZVJvbGVzLmxlbmd0aCkge1xuICAgIGlzQXV0aG9yaXplZCA9IHRhYmxlUm9sZXMuZmluZChcbiAgICAgICh0YWJsZVJvbGU6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAodGFibGVSb2xlID09PSAnYWxsJykge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXNlckhhc0F1dGhvcml6YXRpb24gPSB1c2VyLnJvbGVzLmZpbmQoXG4gICAgICAgICAgKHVzZXJSb2xlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHVzZXJSb2xlLm5hbWUgPT09IHRhYmxlUm9sZSk7XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIHJldHVybiB1c2VySGFzQXV0aG9yaXphdGlvbiA/IHRydWUgOiBmYWxzZVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIHJldHVybiBpc0F1dGhvcml6ZWQgPyB0cnVlIDogZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclZpc2libGVUYWJsZUNvbHVtbnModGFibGU6IElUYWJsZUluZm8sIHRhcmdldDogJ21haW4nIHwgJ2RldGFpbCcpIHtcbiAgcmV0dXJuIHRhYmxlLmNvbHVtbnMuZmlsdGVyKFxuICAgIChjb2x1bW4pID0+IGNvbHVtbi52aXNpYmxlW3RhcmdldF0gfHwgY29sdW1uLm5hbWUgPT09IHRhYmxlLnBrXG4gICkubWFwKFxuICAgIChjb2x1bW4pID0+IGNvbHVtbi5uYW1lXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkhvb2soXG4gIFRBQkxFOiBJVGFibGVJbmZvLFxuICBob29rOiBIb29rcyxcbiAgaW5zdGFuY2U6ICdhZnRlcicgfCAnYmVmb3JlJyxcbiAgcmVxOiBJTUNSZXF1ZXN0LFxuICByZXM6IElNQ1Jlc3BvbnNlLFxuICBkYXRhYmFzZTogS25leCB8IG51bGwsXG4gIHJlc3VsdHM/OiBhbnlcbikge1xuICBpZiAoVEFCTEUuaG9va3MgJiYgVEFCTEUuaG9va3NbaG9va10pIHtcbiAgICBjb25zdCBIT09LID0gVEFCTEUuaG9va3NbaG9va11cbiAgICBpZiAoZGF0YWJhc2UgJiYgSE9PSyAmJiBIT09LW2luc3RhbmNlXSkge1xuICAgICAgY29uc3QgQ0FMTEVSICA9IEhPT0tbaW5zdGFuY2VdXG4gICAgICByZXR1cm4gQ0FMTEVSID9cbiAgICAgICAgaW5zdGFuY2UgPT09ICdiZWZvcmUnID9cbiAgICAgICAgICBDQUxMRVIocmVxLCByZXMsIGRhdGFiYXNlLCBUQUJMRS5uYW1lKVxuICAgICAgICAgIDpcbiAgICAgICAgICBDQUxMRVIocmVxLCByZXMsIGRhdGFiYXNlLCBUQUJMRS5uYW1lLCByZXN1bHRzKVxuICAgICAgICA6XG4gICAgICAgIFByb21pc2UucmVzb2x2ZShob29rID09PSAnZ2V0VGFibGVDb3VudCcgPyByZXN1bHRzLmxlbmd0aCA6IHJlc3VsdHMpXG4gICAgfVxuICB9XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoaG9vayA9PT0gJ2dldFRhYmxlQ291bnQnID8gcmVzdWx0cy5sZW5ndGggOiByZXN1bHRzKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFibGVDb25maWcoVEFCTEVfTkFNRTogc3RyaW5nKSB7XG4gIHJldHVybiBjb25maWcoKS5zZXR0aW5ncy5maWx0ZXIoXG4gICAgKHRhYmxlSXRlbSkgPT4gdGFibGVJdGVtLm5hbWUgPT09IFRBQkxFX05BTUVcbiAgKVswXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sdW1uc0J5TmFtZShUQUJMRV9DT05GSUc6IElUYWJsZUluZm8pIHtcbiAgY29uc3QgY29sdW1uc0J5TmFtZToge1xuICAgIFtrZXk6IHN0cmluZ106IElDb2x1bW5JbmZvXG4gIH0gPSB7fVxuXG4gIFRBQkxFX0NPTkZJRy5jb2x1bW5zLmZvckVhY2goXG4gICAgKGNvbHVtbikgPT4ge1xuICAgICAgY29sdW1uc0J5TmFtZVtjb2x1bW4ubmFtZV0gPSBjb2x1bW5cbiAgICB9XG4gIClcblxuICByZXR1cm4gY29sdW1uc0J5TmFtZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sdW1uc1dpdGhSZWxhdGlvbnMoVEFCTEVfQ09ORklHOiBJVGFibGVJbmZvKSB7XG4gIHJldHVybiBUQUJMRV9DT05GSUcuY29sdW1ucy5maWx0ZXIoXG4gICAgKGNvbHVtbikgPT4gY29sdW1uLnJlbGF0aW9uXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UXVlcnlGaWx0ZXJzKFFVRVJZOiBLbmV4LlF1ZXJ5QnVpbGRlciwgZmlsdGVyczogc3RyaW5nLCBUQUJMRV9DT05GSUc6IElUYWJsZUluZm8pIHtcbiAgY29uc3QgY29sdW1uc0J5TmFtZSA9IGdldENvbHVtbnNCeU5hbWUoVEFCTEVfQ09ORklHKVxuICBjb25zdCBGSUxURVJTID0gSlNPTi5wYXJzZShmaWx0ZXJzKVxuICBPYmplY3Qua2V5cyhGSUxURVJTKS5mb3JFYWNoKFxuICAgIChrZXksIGluZGV4KSA9PiB7XG4gICAgICBpZiAoY29sdW1uc0J5TmFtZVtrZXldLnR5cGUgPT09ICdpbnQoMTEpJykge1xuICAgICAgICBpbmRleCA9PT0gMCA/XG4gICAgICAgICAgUVVFUlkud2hlcmUoe1xuICAgICAgICAgICAgW2tleV06IEZJTFRFUlNba2V5XSxcbiAgICAgICAgICB9KSA6XG4gICAgICAgICAgUVVFUlkuYW5kV2hlcmUoe1xuICAgICAgICAgICAgW2tleV06IEZJTFRFUlNba2V5XSxcbiAgICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXggPT09IDAgP1xuICAgICAgICAgIFFVRVJZLndoZXJlKGtleSwgJ2xpa2UnLCAnJScgKyBGSUxURVJTW2tleV0gKyAnJScpIDpcbiAgICAgICAgICBRVUVSWS5hbmRXaGVyZShrZXksICdsaWtlJywgJyUnICsgRklMVEVSU1trZXldICsgJyUnKVxuICAgICAgfVxuICAgIH1cbiAgKVxuXG4gIHJldHVybiBRVUVSWVxufVxuIl19