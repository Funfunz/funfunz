"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateSettings = generateSettings;
exports.generateConfig = generateConfig;

var _debug = _interopRequireDefault(require("debug"));

var _fs = _interopRequireDefault(require("fs"));

var _pluralize = _interopRequireDefault(require("pluralize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.default)('funfunzmc:config-generator');

function buildTableInfo() {
  return {
    name: '',
    verbose: '',
    pk: '',
    columns: [],
    visible: true,
    roles: ['all']
  };
}

function buildColumnInfo() {
  return {
    name: '',
    verbose: '',
    type: '',
    allowNull: true,
    visible: {
      main: true,
      detail: true
    },
    editable: true
  };
}

function generateSettings(DBData) {
  var resultData = [];
  DBData.forEach(function (tableData) {
    var table = buildTableInfo();
    var schema = tableData.schema;
    var describe = tableData.describe;
    table.name = schema[0].TABLE_NAME;
    var pluralName = (0, _pluralize.default)(table.name);
    table.verbose = pluralName.charAt(0).toUpperCase() + pluralName.slice(1);
    describe.forEach(function (column) {
      var columnData = buildColumnInfo();
      columnData.name = column.Field;
      columnData.verbose = column.Field;
      columnData.type = column.Type;
      columnData.allowNull = column.Null === 'NO' ? false : true;

      if (column.Key === 'PRI') {
        table.pk = column.Field;
      }

      tableData.schema.forEach(function (schemaData) {
        if (schemaData.COLUMN_NAME === column.Field) {
          columnData.relation = {
            type: 'oneToMany',
            table: schemaData.REFERENCED_TABLE_NAME || '',
            key: schemaData.REFERENCED_COLUMN_NAME || '',
            display: schemaData.REFERENCED_COLUMN_NAME || ''
          };
        }
      });
      table.columns.push(columnData);
    });

    _fs.default.writeFile('generatedConfigs/models/' + table.name + '.js', 'export default ' + JSON.stringify(table, null, 2), 'utf8', function (err) {
      if (err) {
        debug('err' + JSON.stringify(err));
      }
    });

    resultData.push(table);
  });

  _fs.default.writeFile('generatedConfigs/MCsettings.js', resultData.map(function (table) {
    return "import ".concat(table.name, "Model from './models/").concat(table.name, "'\n");
  }).join('') + '\nexport default [\n' + resultData.map(function (table) {
    return "  ".concat(table.name, "Model,\n");
  }).join('') + ']\n', 'utf8', function (err) {
    if (err) {
      debug('err' + JSON.stringify(err));
    }
  });
}

function generateConfig(answers) {
  var _finalConfig;

  var finalConfig = (_finalConfig = {}, _defineProperty(_finalConfig, answers.DBType, {
    host: answers.DBHost,
    database: answers.DBName,
    user: answers.DBUser,
    password: answers.DBPassword
  }), _defineProperty(_finalConfig, "server", {
    port: 3004
  }), _finalConfig);

  _fs.default.writeFile('generatedConfigs/MCconfig.js', 'export default ' + JSON.stringify(finalConfig, null, 2), 'utf8', function (err) {
    if (err) {
      debug('err' + JSON.stringify(err));
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,