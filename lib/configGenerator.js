"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateSettings = generateSettings;
exports.generateConfig = generateConfig;

var _fs = _interopRequireDefault(require("fs"));

var _pluralize = _interopRequireDefault(require("pluralize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function buildTableInfo() {
  return {
    name: '',
    verbose: '',
    pk: '',
    columns: [],
    visible: true,
    roles: ['all']
  };
}

function buildColumnInfo() {
  return {
    name: '',
    verbose: '',
    type: '',
    allowNull: true,
    visible: {
      main: true,
      detail: true
    },
    editable: true
  };
}

function generateSettings(DBData) {
  var resultData = [];
  DBData.forEach(function (tableData) {
    var table = buildTableInfo();
    var schema = tableData.schema;
    var describe = tableData.describe;
    console.log(schema[0]);
    table.name = schema[0].TABLE_NAME;
    var pluralName = (0, _pluralize.default)(table.name);
    table.verbose = pluralName.charAt(0).toUpperCase() + pluralName.slice(1);
    describe.forEach(function (column) {
      var columnData = buildColumnInfo();
      columnData.name = column.Field;
      columnData.verbose = column.Field;
      columnData.type = column.Type;
      columnData.allowNull = column.Null === 'NO' ? false : true;

      if (column.Key === 'PRI') {
        table.pk = column.Field;
      }

      tableData.schema.forEach(function (schemaData) {
        if (schemaData.COLUMN_NAME === column.Field) {
          columnData.relation = {
            type: 'oneToMany',
            table: schemaData.REFERENCED_TABLE_NAME || '',
            key: schemaData.REFERENCED_COLUMN_NAME || '',
            display: [schemaData.REFERENCED_COLUMN_NAME || '']
          };
        }
      });
      table.columns.push(columnData);
    });
    resultData.push(table);
  });

  _fs.default.writeFile('settings.json', JSON.stringify(resultData, null, 2), 'utf8', function (err) {
    if (err) {
      console.log('err', err);
    }
  });
}

function generateConfig(answers) {
  var _finalConfig;

  var finalConfig = (_finalConfig = {}, _defineProperty(_finalConfig, answers.DBType, {
    host: answers.DBHost,
    database: answers.DBName,
    user: answers.DBUser,
    password: answers.DBPassword
  }), _defineProperty(_finalConfig, "server", {
    port: 3004
  }), _finalConfig);

  _fs.default.writeFile('config.json', JSON.stringify(finalConfig, null, 2), 'utf8', function (err) {
    if (err) {
      console.log('err', err);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,