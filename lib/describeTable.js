"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mysql = _interopRequireDefault(require("mysql2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// get the client
// create the connection to database
function createPoolSchema() {
  return _mysql.default.createPool({
    host: process.env.DBHost,
    user: process.env.DBUser,
    password: process.env.DBPassword,
    database: 'INFORMATION_SCHEMA',
    waitForConnections: true,
    connectionLimit: 40,
    queueLimit: 0
  });
}

function createPoolDB() {
  return _mysql.default.createPool({
    host: process.env.DBHost,
    user: process.env.DBUser,
    password: process.env.DBPassword,
    database: process.env.DBName,
    waitForConnections: true,
    connectionLimit: 40,
    queueLimit: 0
  });
}

var describe = function describe(tablesNames) {
  var poolSchema = createPoolSchema();
  var poolDB = createPoolDB();
  var promises = tablesNames.map(function (tableName) {
    return new Promise(function (res, rej) {
      var counter = 0;
      var results = {
        schema: [],
        describe: []
      };

      function callback() {
        counter += 1;

        if (counter === 2) {
          res(results);
        }
      }

      poolSchema.execute('SELECT ' + 'TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME ' + 'FROM KEY_COLUMN_USAGE ' + 'WHERE ' + 'TABLE_SCHEMA=\'' + process.env.DBName + '\' ' + 'AND' + 'TABLE_NAME=\'' + tableName + '\' ' + 'AND ' + 'REFERENCED_COLUMN_NAME IS NOT NULL' + ';', function (err, schema) {
        if (err) {
          rej(err);
        }

        if (!schema || schema.length === 0) {
          schema = [{
            TABLE_NAME: tableName
          }];
        }

        results.schema = schema;
        callback();
      });
      poolDB.execute("describe `".concat(tableName, "`"), function (err, describeData) {
        if (err) {
          rej(err);
        }

        results.describe = describeData;
        callback();
      });
    });
  });
  return Promise.all(promises).then(function (result) {
    poolSchema.end();
    poolDB.end();
    return result;
  }).catch(function (err) {
    throw err;
  });
};

var _default = describe;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXNjcmliZVRhYmxlLnRzIl0sIm5hbWVzIjpbImNyZWF0ZVBvb2xTY2hlbWEiLCJteXNxbCIsImNyZWF0ZVBvb2wiLCJob3N0IiwicHJvY2VzcyIsImVudiIsIkRCSG9zdCIsInVzZXIiLCJEQlVzZXIiLCJwYXNzd29yZCIsIkRCUGFzc3dvcmQiLCJkYXRhYmFzZSIsIndhaXRGb3JDb25uZWN0aW9ucyIsImNvbm5lY3Rpb25MaW1pdCIsInF1ZXVlTGltaXQiLCJjcmVhdGVQb29sREIiLCJEQk5hbWUiLCJkZXNjcmliZSIsInRhYmxlc05hbWVzIiwicG9vbFNjaGVtYSIsInBvb2xEQiIsInByb21pc2VzIiwibWFwIiwidGFibGVOYW1lIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsImNvdW50ZXIiLCJyZXN1bHRzIiwic2NoZW1hIiwiY2FsbGJhY2siLCJleGVjdXRlIiwiZXJyIiwibGVuZ3RoIiwiVEFCTEVfTkFNRSIsImRlc2NyaWJlRGF0YSIsImFsbCIsInRoZW4iLCJyZXN1bHQiLCJlbmQiLCJjYXRjaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOzs7O0FBREE7QUFvQkE7QUFDQSxTQUFTQSxnQkFBVCxHQUE0QjtBQUMxQixTQUFPQyxlQUFNQyxVQUFOLENBQWlCO0FBQ3RCQyxJQUFBQSxJQUFJLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxNQURJO0FBRXRCQyxJQUFBQSxJQUFJLEVBQUVILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxNQUZJO0FBR3RCQyxJQUFBQSxRQUFRLEVBQUVMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxVQUhBO0FBSXRCQyxJQUFBQSxRQUFRLEVBQUUsb0JBSlk7QUFLdEJDLElBQUFBLGtCQUFrQixFQUFFLElBTEU7QUFNdEJDLElBQUFBLGVBQWUsRUFBRSxFQU5LO0FBT3RCQyxJQUFBQSxVQUFVLEVBQUU7QUFQVSxHQUFqQixDQUFQO0FBU0Q7O0FBRUQsU0FBU0MsWUFBVCxHQUF3QjtBQUN0QixTQUFPZCxlQUFN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dGhlIGNsaWVudFxuaW1wb3J0IG15c3FsIGZyb20gJ215c3FsMidcblxuZXhwb3J0IHR5cGUgZGVzY3JpYmVJbmZvID0gQXJyYXk8e1xuICBGaWVsZDogc3RyaW5nLFxuICBUeXBlOiBzdHJpbmcsXG4gIE51bGw6IHN0cmluZyxcbiAgS2V5OiBzdHJpbmcsXG4gIERlZmF1bHQ6IHN0cmluZyB8IG51bWJlciB8IG51bGwsXG4gIEV4dHJhOiBzdHJpbmdcbn0+XG5cbmV4cG9ydCB0eXBlIHNjaGVtYUluZm8gPSBBcnJheTx7XG4gIFRBQkxFX05BTUU6IHN0cmluZyxcbiAgQ09MVU1OX05BTUU/OiBzdHJpbmcsXG4gIENPTlNUUkFJTlRfTkFNRT86IHN0cmluZyxcbiAgUkVGRVJFTkNFRF9UQUJMRV9OQU1FPzogc3RyaW5nLFxuICBSRUZFUkVOQ0VEX0NPTFVNTl9OQU1FPzogc3RyaW5nLFxufT5cblxuLy8gY3JlYXRlIHRoZSBjb25uZWN0aW9uIHRvIGRhdGFiYXNlXG5mdW5jdGlvbiBjcmVhdGVQb29sU2NoZW1hKCkge1xuICByZXR1cm4gbXlzcWwuY3JlYXRlUG9vbCh7XG4gICAgaG9zdDogcHJvY2Vzcy5lbnYuREJIb3N0LFxuICAgIHVzZXI6IHByb2Nlc3MuZW52LkRCVXNlcixcbiAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJQYXNzd29yZCxcbiAgICBkYXRhYmFzZTogJ0lORk9STUFUSU9OX1NDSEVNQScsXG4gICAgd2FpdEZvckNvbm5lY3Rpb25zOiB0cnVlLFxuICAgIGNvbm5lY3Rpb25MaW1pdDogNDAsXG4gICAgcXVldWVMaW1pdDogMCxcbiAgfSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlUG9vbERCKCkge1xuICByZXR1cm4gbXlzcWwuY3JlYXRlUG9vbCh7XG4gICAgaG9zdDogcHJvY2Vzcy5lbnYuREJIb3N0LFxuICAgIHVzZXI6IHByb2Nlc3MuZW52LkRCVXNlcixcbiAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJQYXNzd29yZCxcbiAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJOYW1lLFxuICAgIHdhaXRGb3JDb25uZWN0aW9uczogdHJ1ZSxcbiAgICBjb25uZWN0aW9uTGltaXQ6IDQwLFxuICAgIHF1ZXVlTGltaXQ6IDAsXG4gIH0pXG59XG5cbmNvbnN0IGRlc2NyaWJlID0gKHRhYmxlc05hbWVzOiBzdHJpbmdbXSk6IFByb21pc2VMaWtlPEFycmF5PHtzY2hlbWE6IHNjaGVtYUluZm8sIGRlc2NyaWJlOiBkZXNjcmliZUluZm99Pj4gPT4ge1xuICBjb25zdCBwb29sU2NoZW1hID0gY3JlYXRlUG9vbFNjaGVtYSgpXG4gIGNvbnN0IHBvb2xEQiA9IGNyZWF0ZVBvb2xEQigpXG5cbiAgY29uc3QgcHJvbWlzZXM6IEFycmF5PFByb21pc2U8e3NjaGVtYTogc2NoZW1hSW5mbywgZGVzY3JpYmU6IGRlc2NyaWJlSW5mb30+PiA9IHRhYmxlc05hbWVzLm1hcChcbiAgICAodGFibGVOYW1lKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8e3NjaGVtYTogc2NoZW1hSW5mbywgZGVzY3JpYmU6IGRlc2NyaWJlSW5mb30+KFxuICAgICAgICAocmVzLCByZWopID0+IHtcbiAgICAgICAgICBsZXQgY291bnRlciA9IDBcbiAgICAgICAgICBjb25zdCByZXN1bHRzOiB7XG4gICAgICAgICAgICBzY2hlbWE6IHNjaGVtYUluZm8sXG4gICAgICAgICAgICBkZXNjcmliZTogZGVzY3JpYmVJbmZvXG4gICAgICAgICAgfSA9IHtcbiAgICAgICAgICAgIHNjaGVtYTogW10sXG4gICAgICAgICAgICBkZXNjcmliZTogW10sXG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICAgICAgY291bnRlciArPSAxXG4gICAgICAgICAgICBpZiAoY291bnRlciA9PT0gMikge1xuICAgICAgICAgICAgICByZXMocmVzdWx0cylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcG9vbFNjaGVtYS5leGVjdXRlKFxuICAgICAgICAgICAgJ1NFTEVDVCAnICtcbiAgICAgICAgICAgICdUQUJMRV9OQU1FLCBDT0xVTU5fTkFNRSwgQ09OU1RSQUlOVF9OQU1FLCBSRUZFUkVOQ0VEX1RBQkxFX05BTUUsIFJFRkVSRU5DRURfQ09MVU1OX05BTUUgJyArXG4gICAgICAgICAgICAnRlJPTSBLRVlfQ09MVU1OX1VTQUdFICcgK1xuICAgICAgICAgICAgJ1dIRVJFICcgK1xuICAgICAgICAgICAgICAnVEFCTEVfU0NIRU1BPVxcJycgKyBwcm9jZXNzLmVudi5EQk5hbWUgKyAnXFwnICcgK1xuICAgICAgICAgICAgICAnQU5EJyArXG4gICAgICAgICAgICAgICdUQUJMRV9OQU1FPVxcJycgKyB0YWJsZU5hbWUgKyAnXFwnICcgK1xuICAgICAgICAgICAgICAnQU5EICcgK1xuICAgICAgICAgICAgICAnUkVGRVJFTkNFRF9DT0xVTU5fTkFNRSBJUyBOT1QgTlVMTCcgK1xuICAgICAgICAgICAgJzsnLFxuICAgICAgICAgICAgKGVyciwgc2NoZW1hOiBzY2hlbWFJbmZvKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWooZXJyKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghc2NoZW1hIHx8IHNjaGVtYS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBzY2hlbWEgPSBbe1RBQkxFX05BTUU6IHRhYmxlTmFtZX1dXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzdWx0cy5zY2hlbWEgPSBzY2hlbWFcbiAgICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIClcbiAgICAgICAgICBwb29sREIuZXhlY3V0ZShcbiAgICAgICAgICAgIGBkZXNjcmliZSBcXGAke3RhYmxlTmFtZX1cXGBgLFxuICAgICAgICAgICAgKGVyciwgZGVzY3JpYmVEYXRhOiBkZXNjcmliZUluZm8pID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlaihlcnIpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzdWx0cy5kZXNjcmliZSA9IGRlc2NyaWJlRGF0YVxuICAgICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuICApXG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihcbiAgICAocmVzdWx0OiBBcnJheTx7c2NoZW1hOiBzY2hlbWFJbmZvLCBkZXNjcmliZTogZGVzY3JpYmVJbmZvfT4pID0+IHtcbiAgICAgIHBvb2xTY2hlbWEuZW5kKClcbiAgICAgIHBvb2xEQi5lbmQoKVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgKS5jYXRjaChcbiAgICAoZXJyKSA9PiB7XG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVzY3JpYmVcbiJdfQ==