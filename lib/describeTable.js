"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mysql = _interopRequireDefault(require("mysql2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// create the connection to database
function createPoolSchema() {
  return _mysql.default.createPool({
    host: process.env.DBHost,
    user: process.env.DBUser,
    password: process.env.DBPassword,
    database: 'INFORMATION_SCHEMA',
    waitForConnections: true,
    connectionLimit: 40,
    queueLimit: 0
  });
}

function createPoolDB() {
  return _mysql.default.createPool({
    host: process.env.DBHost,
    user: process.env.DBUser,
    password: process.env.DBPassword,
    database: process.env.DBName,
    waitForConnections: true,
    connectionLimit: 40,
    queueLimit: 0
  });
}

var describe = function describe(tablesNames) {
  var poolSchema = createPoolSchema();
  var poolDescribeDB = createPoolDB();
  var promises = tablesNames.map(function (tableName) {
    return new Promise(function (res, rej) {
      var counter = 0;
      var results = {
        schema: [],
        describe: []
      };

      function callback() {
        counter += 1;

        if (counter === 2) {
          res(results);
        }
      }

      poolSchema.execute('SELECT ' + 'TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME ' + 'FROM KEY_COLUMN_USAGE ' + 'WHERE ' + 'TABLE_SCHEMA=\'' + process.env.DBName + '\' ' + 'AND ' + 'TABLE_NAME=\'' + tableName + '\' ' + 'AND ' + 'REFERENCED_COLUMN_NAME IS NOT NULL' + ';', function (err, schema) {
        if (err) {
          rej(err);
        }

        if (!schema || schema.length === 0) {
          schema = [{
            TABLE_NAME: tableName
          }];
        } else {
          schema = schema.map(function (schemaItem) {
            return _objectSpread({}, schemaItem, {
              TABLE_NAME: tableName
            });
          });
        }

        results.schema = schema;
        callback();
      });
      poolDescribeDB.execute("describe `".concat(tableName, "`"), function (err, describeData) {
        if (err) {
          rej(err);
        }

        results.describe = describeData;
        callback();
      });
    });
  });
  return Promise.all(promises).then(function (result) {
    poolSchema.end();
    poolDescribeDB.end();
    return result;
  }).catch(function (err) {
    throw err;
  });
};

var _default = describe;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXNjcmliZVRhYmxlLnRzIl0sIm5hbWVzIjpbImNyZWF0ZVBvb2xTY2hlbWEiLCJteXNxbCIsImNyZWF0ZVBvb2wiLCJob3N0IiwicHJvY2VzcyIsImVudiIsIkRCSG9zdCIsInVzZXIiLCJEQlVzZXIiLCJwYXNzd29yZCIsIkRCUGFzc3dvcmQiLCJkYXRhYmFzZSIsIndhaXRGb3JDb25uZWN0aW9ucyIsImNvbm5lY3Rpb25MaW1pdCIsInF1ZXVlTGltaXQiLCJjcmVhdGVQb29sREIiLCJEQk5hbWUiLCJkZXNjcmliZSIsInRhYmxlc05hbWVzIiwicG9vbFNjaGVtYSIsInBvb2xEZXNjcmliZURCIiwicHJvbWlzZXMiLCJtYXAiLCJ0YWJsZU5hbWUiLCJQcm9taXNlIiwicmVzIiwicmVqIiwiY291bnRlciIsInJlc3VsdHMiLCJzY2hlbWEiLCJjYWxsYmFjayIsImV4ZWN1dGUiLCJlcnIiLCJsZW5ndGgiLCJUQUJMRV9OQU1FIiwic2NoZW1hSXRlbSIsImRlc2NyaWJlRGF0YSIsImFsbCIsInRoZW4iLCJyZXN1bHQiLCJlbmQiLCJjYXRjaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOzs7Ozs7OztBQW1CQTtBQUNBLFNBQVNBLGdCQUFULEdBQTRCO0FBQzFCLFNBQU9DLGVBQU1DLFVBQU4sQ0FBaUI7QUFDdEJDLElBQUFBLElBQUksRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE1BREk7QUFFdEJDLElBQUFBLElBQUksRUFBRUgsT0FBTyxDQUFDQyxHQUFSLENBQVlHLE1BRkk7QUFHdEJDLElBQUFBLFFBQVEsRUFBRUwsT0FBTyxDQUFDQyxHQUFSLENBQVlLLFVBSEE7QUFJdEJDLElBQUFBLFFBQVEsRUFBRSxvQkFKWTtBQUt0QkMsSUFBQUEsa0JBQWtCLEVBQUUsSUFMRTtBQU10QkMsSUFBQUEsZUFBZSxFQUFFLEVBTks7QUFPdEJDLElBQUFBLFVBQVUsRUFBRTtBQVBVLEdBQWpCLENBQVA7QUFTRDs7QUFFRCxTQUFTQyxZQUFULEdB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Q0FBQ29CLEdBQWY7QUFDQSxXQUFPRCxNQUFQO0FBQ0QsR0FMSSxFQU1MRSxLQU5LLENBT0wsVUFBQ1QsR0FBRCxFQUFTO0FBQ1AsVUFBTUEsR0FBTjtBQUNELEdBVEksQ0FBUDtBQVdELENBNUVEOztlQThFZWYsUSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGdldCB0aGUgY2xpZW50XG5pbXBvcnQgbXlzcWwgZnJvbSAnbXlzcWwyJ1xuXG5leHBvcnQgdHlwZSBkZXNjcmliZUluZm8gPSBBcnJheTx7XG4gIEZpZWxkOiBzdHJpbmcsXG4gIFR5cGU6IHN0cmluZyxcbiAgTnVsbDogc3RyaW5nLFxuICBLZXk6IHN0cmluZyxcbiAgRGVmYXVsdDogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCxcbiAgRXh0cmE6IHN0cmluZ1xufT5cblxuZXhwb3J0IHR5cGUgc2NoZW1hSW5mbyA9IEFycmF5PHtcbiAgVEFCTEVfTkFNRTogc3RyaW5nLFxuICBDT0xVTU5fTkFNRT86IHN0cmluZyxcbiAgQ09OU1RSQUlOVF9OQU1FPzogc3RyaW5nLFxuICBSRUZFUkVOQ0VEX1RBQkxFX05BTUU/OiBzdHJpbmcsXG4gIFJFRkVSRU5DRURfQ09MVU1OX05BTUU/OiBzdHJpbmcsXG59PlxuXG4vLyBjcmVhdGUgdGhlIGNvbm5lY3Rpb24gdG8gZGF0YWJhc2VcbmZ1bmN0aW9uIGNyZWF0ZVBvb2xTY2hlbWEoKSB7XG4gIHJldHVybiBteXNxbC5jcmVhdGVQb29sKHtcbiAgICBob3N0OiBwcm9jZXNzLmVudi5EQkhvc3QsXG4gICAgdXNlcjogcHJvY2Vzcy5lbnYuREJVc2VyLFxuICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQlBhc3N3b3JkLFxuICAgIGRhdGFiYXNlOiAnSU5GT1JNQVRJT05fU0NIRU1BJyxcbiAgICB3YWl0Rm9yQ29ubmVjdGlvbnM6IHRydWUsXG4gICAgY29ubmVjdGlvbkxpbWl0OiA0MCxcbiAgICBxdWV1ZUxpbWl0OiAwLFxuICB9KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQb29sREIoKSB7XG4gIHJldHVybiBteXNxbC5jcmVhdGVQb29sKHtcbiAgICBob3N0OiBwcm9jZXNzLmVudi5EQkhvc3QsXG4gICAgdXNlcjogcHJvY2Vzcy5lbnYuREJVc2VyLFxuICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQlBhc3N3b3JkLFxuICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQk5hbWUsXG4gICAgd2FpdEZvckNvbm5lY3Rpb25zOiB0cnVlLFxuICAgIGNvbm5lY3Rpb25MaW1pdDogNDAsXG4gICAgcXVldWVMaW1pdDogMCxcbiAgfSlcbn1cblxuY29uc3QgZGVzY3JpYmUgPSAodGFibGVzTmFtZXM6IHN0cmluZ1tdKTogUHJvbWlzZUxpa2U8QXJyYXk8e3NjaGVtYTogc2NoZW1hSW5mbywgZGVzY3JpYmU6IGRlc2NyaWJlSW5mb30+PiA9PiB7XG4gIGNvbnN0IHBvb2xTY2hlbWEgPSBjcmVhdGVQb29sU2NoZW1hKClcbiAgY29uc3QgcG9vbERlc2NyaWJlREIgPSBjcmVhdGVQb29sREIoKVxuXG4gIGNvbnN0IHByb21pc2VzOiBBcnJheTxQcm9taXNlPHtzY2hlbWE6IHNjaGVtYUluZm8sIGRlc2NyaWJlOiBkZXNjcmliZUluZm99Pj4gPSB0YWJsZXNOYW1lcy5tYXAoXG4gICAgKHRhYmxlTmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHtzY2hlbWE6IHNjaGVtYUluZm8sIGRlc2NyaWJlOiBkZXNjcmliZUluZm99PihcbiAgICAgICAgKHJlcywgcmVqKSA9PiB7XG4gICAgICAgICAgbGV0IGNvdW50ZXIgPSAwXG4gICAgICAgICAgY29uc3QgcmVzdWx0czoge1xuICAgICAgICAgICAgc2NoZW1hOiBzY2hlbWFJbmZvLFxuICAgICAgICAgICAgZGVzY3JpYmU6IGRlc2NyaWJlSW5mb1xuICAgICAgICAgIH0gPSB7XG4gICAgICAgICAgICBzY2hlbWE6IFtdLFxuICAgICAgICAgICAgZGVzY3JpYmU6IFtdLFxuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gMVxuICAgICAgICAgICAgaWYgKGNvdW50ZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgcmVzKHJlc3VsdHMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvb2xTY2hlbWEuZXhlY3V0ZShcbiAgICAgICAgICAgICdTRUxFQ1QgJyArXG4gICAgICAgICAgICAnVEFCTEVfTkFNRSwgQ09MVU1OX05BTUUsIENPTlNUUkFJTlRfTkFNRSwgUkVGRVJFTkNFRF9UQUJMRV9OQU1FLCBSRUZFUkVOQ0VEX0NPTFVNTl9OQU1FICcgK1xuICAgICAgICAgICAgJ0ZST00gS0VZX0NPTFVNTl9VU0FHRSAnICtcbiAgICAgICAgICAgICdXSEVSRSAnICtcbiAgICAgICAgICAgICAgJ1RBQkxFX1NDSEVNQT1cXCcnICsgcHJvY2Vzcy5lbnYuREJOYW1lICsgJ1xcJyAnICtcbiAgICAgICAgICAgICAgJ0FORCAnICtcbiAgICAgICAgICAgICAgJ1RBQkxFX05BTUU9XFwnJyArIHRhYmxlTmFtZSArICdcXCcgJyArXG4gICAgICAgICAgICAgICdBTkQgJyArXG4gICAgICAgICAgICAgICdSRUZFUkVOQ0VEX0NPTFVNTl9OQU1FIElTIE5PVCBOVUxMJyArXG4gICAgICAgICAgICAnOycsXG4gICAgICAgICAgICAoZXJyLCBzY2hlbWE6IHNjaGVtYUluZm8pID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlaihlcnIpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFzY2hlbWEgfHwgc2NoZW1hLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHNjaGVtYSA9IFt7VEFCTEVfTkFNRTogdGFibGVOYW1lfV1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY2hlbWEgPSBzY2hlbWEubWFwKFxuICAgICAgICAgICAgICAgICAgKHNjaGVtYUl0ZW0pID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLnNjaGVtYUl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIFRBQkxFX05BTUU6IHRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdHMuc2NoZW1hID0gc2NoZW1hXG4gICAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApXG4gICAgICAgICAgcG9vbERlc2NyaWJlREIuZXhlY3V0ZShcbiAgICAgICAgICAgIGBkZXNjcmliZSBcXGAke3RhYmxlTmFtZX1cXGBgLFxuICAgICAgICAgICAgKGVyciwgZGVzY3JpYmVEYXRhOiBkZXNjcmliZUluZm8pID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlaihlcnIpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzdWx0cy5kZXNjcmliZSA9IGRlc2NyaWJlRGF0YVxuICAgICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuICApXG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihcbiAgICAocmVzdWx0KSA9PiB7XG4gICAgICBwb29sU2NoZW1hLmVuZCgpXG4gICAgICBwb29sRGVzY3JpYmVEQi5lbmQoKVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgKS5jYXRjaChcbiAgICAoZXJyKSA9PiB7XG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVzY3JpYmVcbiJdfQ==