"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mysql = _interopRequireDefault(require("mysql2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// get the client
// create the connection to database
function createPoolSchema() {
  return _mysql.default.createPool({
    host: process.env.DBHost,
    user: process.env.DBUser,
    password: process.env.DBPassword,
    database: 'INFORMATION_SCHEMA',
    waitForConnections: true,
    connectionLimit: 40,
    queueLimit: 0
  });
}

function createPoolDB() {
  return _mysql.default.createPool({
    host: process.env.DBHost,
    user: process.env.DBUser,
    password: process.env.DBPassword,
    database: process.env.DBName,
    waitForConnections: true,
    connectionLimit: 40,
    queueLimit: 0
  });
}

var describe = function describe(tablesNames) {
  var poolSchema = createPoolSchema();
  var poolDB = createPoolDB();
  var promises = tablesNames.map(function (tableName) {
    return new Promise(function (res, rej) {
      var counter = 0;
      var results = {
        schema: [],
        describe: []
      };

      function callback() {
        counter += 1;

        if (counter === 2) {
          res(results);
        }
      }

      poolSchema.execute("SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME FROM KEY_COLUMN_USAGE WHERE TABLE_SCHEMA='".concat(process.env.DBName, "' AND TABLE_NAME=\"").concat(tableName, "\" AND REFERENCED_COLUMN_NAME IS NOT NULL;"), function (err, schema) {
        if (err) {
          rej(err);
        }

        if (!schema || schema.length === 0) {
          schema = [{
            TABLE_NAME: tableName
          }];
        }

        results.schema = schema;
        callback();
      });
      poolDB.execute("describe `".concat(tableName, "`"), function (err, describe) {
        if (err) {
          rej(err);
        }

        results.describe = describe;
        callback();
      });
    });
  });
  return Promise.all(promises).then(function (result) {
    poolSchema.end();
    poolDB.end();
    return result;
  }).catch(function (err) {
    throw err;
  });
};

var _default = describe;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXNjcmliZVRhYmxlLnRzIl0sIm5hbWVzIjpbImNyZWF0ZVBvb2xTY2hlbWEiLCJteXNxbCIsImNyZWF0ZVBvb2wiLCJob3N0IiwicHJvY2VzcyIsImVudiIsIkRCSG9zdCIsInVzZXIiLCJEQlVzZXIiLCJwYXNzd29yZCIsIkRCUGFzc3dvcmQiLCJkYXRhYmFzZSIsIndhaXRGb3JDb25uZWN0aW9ucyIsImNvbm5lY3Rpb25MaW1pdCIsInF1ZXVlTGltaXQiLCJjcmVhdGVQb29sREIiLCJEQk5hbWUiLCJkZXNjcmliZSIsInRhYmxlc05hbWVzIiwicG9vbFNjaGVtYSIsInBvb2xEQiIsInByb21pc2VzIiwibWFwIiwidGFibGVOYW1lIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsImNvdW50ZXIiLCJyZXN1bHRzIiwic2NoZW1hIiwiY2FsbGJhY2siLCJleGVjdXRlIiwiZXJyIiwibGVuZ3RoIiwiVEFCTEVfTkFNRSIsImFsbCIsInRoZW4iLCJyZXN1bHQiLCJlbmQiLCJjYXRjaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOzs7O0FBREE7QUFvQkE7QUFDQSxTQUFTQSxnQkFBVCxHQUE0QjtBQUMxQixTQUFPQyxlQUFNQyxVQUFOLENBQWlCO0FBQ3RCQyxJQUFBQSxJQUFJLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxNQURJO0FBRXRCQyxJQUFBQSxJQUFJLEVBQUVILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxNQUZJO0FBR3RCQyxJQUFBQSxRQUFRLEVBQUVMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxVQUhBO0FBSXRCQyxJQUFBQSxRQUFRLEVBQUUsb0JBSlk7QUFLdEJDLElBQUFBLGtCQUFrQixFQUFFLElBTEU7QUFNdEJDLElBQUFBLGVBQWUsRUFBRSxFQU5LO0FBT3RCQyxJQUFBQSxVQUFVLEVBQUU7QUFQVSxHQUFqQixDQUFQO0FBU0Q7O0FBRUQsU0FBU0MsWUFBVCxHQUF3QjtBQUN0QixTQUFPZCxlQUFNQyxVQUFOLENBQWlCO0FBQ3RCQyxJQUFBQSxJQUFJLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxNQURJO0FBRXRCQyxJQUFBQSxJQUFJLEVBQUVILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxNQUZJO0FBR3RCQyxJQUFBQSxRQUFRLEVBQUVMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxVQUhBO0FBSXRCQyxJQUFBQSxRQUFRLEVBQUVQLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVyxNQUpBO0FBS3RCSixJQUFBQSxrQkFBa0IsRUFBRSxJQUxFO0FBTXRCQyxJQUFBQSxlQUFlLEVBQUUsRUFOSztBQU90QkMsSUFBQUEsVUFBVSxFQUFFO0FBUFUsR0FBakIsQ0FBUDtBQVNEOztBQUVELElBQU1HLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUNDLFdBQUQsRUFBa0c7QUFDakgsTUFBTUMsVUFBVSxHQUFHbkIsZ0JBQWdCLEVBQW5DO0FBQ0EsTUFBTW9CLE1BQU0sR0FBR0wsWUFBWSxFQUEzQjtBQUVBLE1BQU1NLFFBQXFFLEdBQUdILFdBQVcsQ0FBQ0ksR0FBWixDQUM1RSxVQUFBQyxTQUFTLEVBQUk7QUFDWCxXQUFPLElBQUlDLE9BQUosQ0FDTCxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNaLFVBQUlDLE9BQU8sR0FBRyxDQUFkO0FBQ0EsVUFBSUMsT0FHSCxHQUFHO0FBQ0ZDLFFBQUFBLE1BQU0sRUFBRSxFQUROO0FBRUZaLFFBQUFBLFFBQVEsRUFBRTtBQUZSLE9BSEo7O0FBT0EsZUFBU2EsUUFBVCxHQUFvQjtBQUNsQkgsUUFBQUEsT0FBTyxJQUFJLENBQVg7O0FBQ0EsWUFBSUEsT0FBTyxLQUFLLENBQWhCLEVBQW1CO0FBQ2pCRixVQUFBQSxHQUFHLENBQUNHLE9BQUQsQ0FBSDtBQUNEO0FBQ0Y7O0FBQ0RULE1BQUFBLFVBQVUsQ0FBQ1ksT0FBWCxvSkFDOEkzQixPQUFPLENBQUNDLEdBQVIsQ0FBWVcsTUFEMUosZ0NBQ3FMTyxTQURyTCxpREFFRSxVQUFDUyxHQUFELEVBQU1ILE1BQU4sRUFBNkI7QUFDM0IsWUFBSUcsR0FBSixFQUFTO0FBQ1BOLFVBQUFBLEdBQUcsQ0FBQ00sR0FBRCxDQUFIO0FBQ0Q7O0FBQ0QsWUFBSSxDQUFDSCxNQUFELElBQVdBLE1BQU0sQ0FBQ0ksTUFBUCxLQUFrQixDQUFqQyxFQUFvQztBQUNsQ0osVUFBQUEsTUFBTSxHQUFHLENBQUM7QUFBQ0ssWUFBQUEsVUFBVSxFQUFFWDtBQUFiLFdBQUQsQ0FBVDtBQUNEOztBQUNESyxRQUFBQSxPQUFPLENBQUNDLE1BQVIsR0FBaUJBLE1BQWpCO0FBQ0FDLFFBQUFBLFFBQVE7QUFDVCxPQVhIO0FBYUFWLE1BQUFBLE1BQU0sQ0FBQ1csT0FBUCxxQkFDZ0JSLFNBRGhCLFFBRUUsVUFBQ1MsR0FBRCxFQUFNZixRQUFOLEVBQWlDO0FBQy9CLFlBQUllLEdBQUosRUFBUztBQUNQTixVQUFBQSxHQUFHLENBQUNNLEdBQUQsQ0FBSDtBQUNEOztBQUNESixRQUFBQSxPQUFPLENBQUNYLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0FhLFFBQUFBLFFBQVE7QUFDVCxPQVJIO0FBVUQsS0F2Q0ksQ0FBUDtBQXlDRCxHQTNDMkUsQ0FBOUU7QUE2Q0EsU0FBT04sT0FBTyxDQUFDVyxHQUFSLENBQVlkLFFBQVosRUFBc0JlLElBQXRCLENBQ0wsVUFBQ0MsTUFBRCxFQUFpRTtBQUMvRGxCLElBQUFBLFVBQVUsQ0FBQ21CLEdBQVg7QUFDQWxCLElBQUFBLE1BQU0sQ0FBQ2tCLEdBQVA7QUFDQSxXQUFPRCxNQUFQO0FBQ0QsR0FMSSxFQU1MRSxLQU5LLENBT0wsVUFBQVAsR0FBRyxFQUFJO0FBQ0wsVUFBTUEsR0FBTjtBQUNELEdBVEksQ0FBUDtBQVdELENBNUREOztlQThEZWYsUSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGdldCB0aGUgY2xpZW50XG5pbXBvcnQgbXlzcWwgZnJvbSAnbXlzcWwyJ1xuXG5leHBvcnQgdHlwZSBkZXNjcmliZUluZm8gPSBBcnJheTx7XG4gIEZpZWxkOiBzdHJpbmcsXG4gIFR5cGU6IHN0cmluZyxcbiAgTnVsbDogc3RyaW5nLFxuICBLZXk6IHN0cmluZyxcbiAgRGVmYXVsdDogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCxcbiAgRXh0cmE6IHN0cmluZ1xufT5cblxuZXhwb3J0IHR5cGUgc2NoZW1hSW5mbyA9IEFycmF5PHtcbiAgVEFCTEVfTkFNRTogc3RyaW5nLFxuICBDT0xVTU5fTkFNRT86IHN0cmluZyxcbiAgQ09OU1RSQUlOVF9OQU1FPzogc3RyaW5nLFxuICBSRUZFUkVOQ0VEX1RBQkxFX05BTUU/OiBzdHJpbmcsXG4gIFJFRkVSRU5DRURfQ09MVU1OX05BTUU/OiBzdHJpbmcsXG59PlxuIFxuLy8gY3JlYXRlIHRoZSBjb25uZWN0aW9uIHRvIGRhdGFiYXNlXG5mdW5jdGlvbiBjcmVhdGVQb29sU2NoZW1hKCkge1xuICByZXR1cm4gbXlzcWwuY3JlYXRlUG9vbCh7XG4gICAgaG9zdDogcHJvY2Vzcy5lbnYuREJIb3N0LFxuICAgIHVzZXI6IHByb2Nlc3MuZW52LkRCVXNlcixcbiAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJQYXNzd29yZCxcbiAgICBkYXRhYmFzZTogJ0lORk9STUFUSU9OX1NDSEVNQScsXG4gICAgd2FpdEZvckNvbm5lY3Rpb25zOiB0cnVlLFxuICAgIGNvbm5lY3Rpb25MaW1pdDogNDAsXG4gICAgcXVldWVMaW1pdDogMCxcbiAgfSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlUG9vbERCKCkge1xuICByZXR1cm4gbXlzcWwuY3JlYXRlUG9vbCh7XG4gICAgaG9zdDogcHJvY2Vzcy5lbnYuREJIb3N0LFxuICAgIHVzZXI6IHByb2Nlc3MuZW52LkRCVXNlcixcbiAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJQYXNzd29yZCxcbiAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJOYW1lLFxuICAgIHdhaXRGb3JDb25uZWN0aW9uczogdHJ1ZSxcbiAgICBjb25uZWN0aW9uTGltaXQ6IDQwLFxuICAgIHF1ZXVlTGltaXQ6IDBcbiAgfSlcbn1cblxuY29uc3QgZGVzY3JpYmUgPSAodGFibGVzTmFtZXM6IEFycmF5PHN0cmluZz4pOiBQcm9taXNlTGlrZTxBcnJheTx7c2NoZW1hOiBzY2hlbWFJbmZvLCBkZXNjcmliZTogZGVzY3JpYmVJbmZvfT4+ID0+IHtcbiAgY29uc3QgcG9vbFNjaGVtYSA9IGNyZWF0ZVBvb2xTY2hlbWEoKVxuICBjb25zdCBwb29sREIgPSBjcmVhdGVQb29sREIoKVxuXG4gIGNvbnN0IHByb21pc2VzOkFycmF5PFByb21pc2U8e3NjaGVtYTogc2NoZW1hSW5mbywgZGVzY3JpYmU6IGRlc2NyaWJlSW5mb30+PiA9IHRhYmxlc05hbWVzLm1hcChcbiAgICB0YWJsZU5hbWUgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHtzY2hlbWE6IHNjaGVtYUluZm8sIGRlc2NyaWJlOiBkZXNjcmliZUluZm99PihcbiAgICAgICAgKHJlcywgcmVqKSA9PiB7XG4gICAgICAgICAgbGV0IGNvdW50ZXIgPSAwXG4gICAgICAgICAgbGV0IHJlc3VsdHM6IHtcbiAgICAgICAgICAgIHNjaGVtYTogc2NoZW1hSW5mbyxcbiAgICAgICAgICAgIGRlc2NyaWJlOiBkZXNjcmliZUluZm9cbiAgICAgICAgICB9ID0ge1xuICAgICAgICAgICAgc2NoZW1hOiBbXSxcbiAgICAgICAgICAgIGRlc2NyaWJlOiBbXVxuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gMVxuICAgICAgICAgICAgaWYgKGNvdW50ZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgcmVzKHJlc3VsdHMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvb2xTY2hlbWEuZXhlY3V0ZShcbiAgICAgICAgICAgIGBTRUxFQ1QgVEFCTEVfTkFNRSwgQ09MVU1OX05BTUUsIENPTlNUUkFJTlRfTkFNRSwgUkVGRVJFTkNFRF9UQUJMRV9OQU1FLCBSRUZFUkVOQ0VEX0NPTFVNTl9OQU1FIEZST00gS0VZX0NPTFVNTl9VU0FHRSBXSEVSRSBUQUJMRV9TQ0hFTUE9JyR7cHJvY2Vzcy5lbnYuREJOYW1lfScgQU5EIFRBQkxFX05BTUU9XCIke3RhYmxlTmFtZX1cIiBBTkQgUkVGRVJFTkNFRF9DT0xVTU5fTkFNRSBJUyBOT1QgTlVMTDtgLFxuICAgICAgICAgICAgKGVyciwgc2NoZW1hOiBzY2hlbWFJbmZvKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWooZXJyKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghc2NoZW1hIHx8IHNjaGVtYS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBzY2hlbWEgPSBbe1RBQkxFX05BTUU6IHRhYmxlTmFtZX1dXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzdWx0cy5zY2hlbWEgPSBzY2hlbWFcbiAgICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIClcbiAgICAgICAgICBwb29sREIuZXhlY3V0ZShcbiAgICAgICAgICAgIGBkZXNjcmliZSBcXGAke3RhYmxlTmFtZX1cXGBgLFxuICAgICAgICAgICAgKGVyciwgZGVzY3JpYmU6IGRlc2NyaWJlSW5mbykgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqKGVycilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHRzLmRlc2NyaWJlID0gZGVzY3JpYmVcbiAgICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cbiAgKVxuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oXG4gICAgKHJlc3VsdDogQXJyYXk8e3NjaGVtYTogc2NoZW1hSW5mbywgZGVzY3JpYmU6IGRlc2NyaWJlSW5mb30+KSA9PiB7XG4gICAgICBwb29sU2NoZW1hLmVuZCgpXG4gICAgICBwb29sREIuZW5kKClcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICkuY2F0Y2goXG4gICAgZXJyID0+IHtcbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBkZXNjcmliZVxuIl19